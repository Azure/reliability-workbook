resources
| where resourceGroup in ({ResourceGroup})
| extend environment = case(
    tags.Environment <> "", tags.Environment,
    tags.environment <> "", tags.environment,
    tags.Env <> "", tags.Env,
    tags.env <> "", tags.env,
    tolower(name) contains "prod", "Production",
    tolower(name) contains "dev", "Development",
    tolower(name) contains "qa", "QA",
    tolower(name) contains "uat", "UAT",
    tolower(name) contains "sit", "SIT",
    tolower(name) contains "test", "Test",
    "Undefined")
| where environment in ({Environment})
| join kind = innerunique(
    resources
    | extend replaced_tags = replace('{}', 'null', tostring(tags))
    | extend replaced_tags = parse_json(replaced_tags)
    | mv-expand replaced_tags
    | extend tagName = tostring(bag_keys(replaced_tags)[0])
    | extend tagValue = tostring(replaced_tags['{TagName}'])
    | where tagName has '{TagName}' and tagValue has '{TagValue}'
    | distinct id
    )
    on id
| where 
    (type == 'microsoft.compute/virtualmachines') or 
    (type == 'microsoft.classiccompute/virtualmachines') or 
    (type == "microsoft.compute/virtualmachinescalesets" and tags.aksEngineVersion !contains "aks-gomod") or
    (type == 'microsoft.web/sites') or 
    (type == 'microsoft.web/serverfarms') or
    (type == "microsoft.containerservice/managedclusters") or 
    (type == 'microsoft.sql/servers/databases') or 
    (type == 'microsoft.documentdb/databaseaccounts') or 
    (type == 'microsoft.dbformysql/servers') or 
    (type == 'microsoft.dbformysql/flexibleservers') or 
    (type == 'microsoft.cache/redis') or
    (type == "microsoft.apimanagement/service") or 
    (type == "microsoft.storage/storageaccounts" or type == "microsoft.classicstorage/storageaccounts") or 
    (type == "microsoft.network/azurefirewalls") or 
    (type == "microsoft.network/frontdoors") or
    (type == "microsoft.cdn/profiles") or
    (type == "microsoft.network/applicationgateways") or 
    (type == "microsoft.network/loadbalancers") or 
    (type == "microsoft.network/publicipaddresses" or type == "microsoft.network/publicipprefixes") or 
    (type == "microsoft.network/virtualnetworkgateways") or 
    (type == "microsoft.recoveryservices/vaults")
| join kind=leftouter (
    resources 
    | where type == "microsoft.containerservice/managedclusters"
    // Expand per node pool to get using zone for all node pool
    | mv-expand agentPoolProfiles = properties.agentPoolProfiles
    | extend AvZones = agentPoolProfiles.availabilityZones
    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))
    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0
    | extend useAvZone = case(
        array_length( AvZones ) > 0, array_length( AvZones ), 0
    )
    | join kind=leftouter(
        resources
            | where type == 'microsoft.compute/virtualmachinescalesets'
            | extend resourceGroup = tolower(tostring(resourceGroup))
            | extend VmssCapacity = sku.capacity
            | extend vmssStorageAccountType = iff(
                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == "Local", "Ephemeral", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType
            )
    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup
    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup
    | extend AksNodePoolStorageAccountType = iff(
        tolower(tostring(AksNodePoolStorageAccountType)) contains "standard_lrs", "standard_lrs", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, ",")))
    )
    // If there are some node pools within AKS cluster, it returns minimum number of zones. 
    // If even one node pool is not using a zone, it will be "Not Configured".
    | extend AvZones = iff(tostring(AvZones) == "0", "Not Configured", tostring(AvZones)), AvSets = "Scale Sets"
) on id
// Start - Azure Load Balancer additional logic
| mv-expand LbFeIpConfig = properties.frontendIPConfigurations
| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) > 0, array_length(LbFeIpConfig.zones ), 0)
| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), "Public", "Private")
//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)
//| extend properties = todynamic(properties), sku = todynamic(sku), 
| summarize LbAvZones = arg_min(LbUseAvZone, *) by id
// End - Azure Load Balancer additional logic
| extend state = case(
    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),
    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),
    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),
    type == 'microsoft.web/sites', tostring(properties.state),
    type == 'microsoft.web/serverfarms', tostring(properties.status),
    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),
    type == 'microsoft.sql/servers/databases', tostring(properties.status),
    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),
    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),
    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),
    type == 'microsoft.cache/redis', tostring(properties.provisioningState),
    type == "microsoft.apimanagement/service", tostring(properties.provisioningState),
    type contains "storageaccounts", tostring(properties.provisioningState),
    type == "microsoft.network/azurefirewalls", tostring(properties.provisioningState),
    type == "microsoft.network/frontdoors", tostring(properties.resourceState),
    type == "microsoft.cdn/profiles", tostring(properties.resourceState),
    type == "microsoft.network/applicationgateways", tostring(properties.operationalState),
    type == "microsoft.network/loadbalancers", tostring(properties.provisioningState),
    type contains "publicip", tostring(properties.provisioningState),
    type == "microsoft.network/virtualnetworkgateways", tostring(properties.provisioningState),
    type == "microsoft.recoveryservices/vaults", tostring(properties.provisioningState),
    "Undefined"
    )
| extend skuName = case(
    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),
    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),
    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),
    type == 'microsoft.web/sites', tostring(properties.sku),
    type == 'microsoft.web/serverfarms', tostring(sku.tier),
    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),
    type == 'microsoft.sql/servers/databases', tostring(sku.tier),
    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),
    type == 'microsoft.dbformysql/servers', tostring(sku.tier),
    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),
    type == 'microsoft.cache/redis', tostring(properties.sku.name),
    type == "microsoft.apimanagement/service", tostring(sku.name),
    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ "microsoft.storage/storageaccounts", sku.name, properties.accountType)))),
    type == "microsoft.network/azurefirewalls", tostring(properties.sku.name),
    type == "microsoft.network/frontdoors", "classic_frontdoor",
    type == "microsoft.cdn/profiles", tostring(sku.name),
    type == "microsoft.network/applicationgateways", tostring(properties.sku.name),
    type == "microsoft.network/loadbalancers", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),
    type contains "publicip", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),
    type == "microsoft.network/virtualnetworkgateways", tostring(properties.sku.name),
    type == "microsoft.recoveryservices/vaults", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),
    "Undefined"
    )
| extend avZones = case(
    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'polandcentral', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3'), 'Not Applicable',
    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),
    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',
    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),
    (type == 'microsoft.containerservice/managedclusters' and AvZones <> ""), AvZones,
    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), "Not Configured",
    (type == 'microsoft.web/sites'), "ASP AZ config",
    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),
    (type == 'microsoft.sql/servers/databases' and sku.tier <> 'DataWarehouse'), case( //SQL AZ SKU & region availability filter
    sku.name == 'Basic' or sku.name == 'Standard' or sku.name == 'System', 'Not Applicable',
    sku.name == 'GeneralPurpose' and location !in~ ('westeurope', 'northeurope', 'westus2', 'francecentral', 'eastus', 'eastus2', 'southeastasia', 'qatarcentral', 'australiaeast', 'japaneast', 'uksouth'), 'Not Applicable',
    properties.zoneRedundant == 'true', 'Configured',
    'Not Configured'
    ),
    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), "Not Applicable",
    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == "false", 'Not Configured', 'Configured'), 
    (type == 'microsoft.dbformysql/servers'), "Not Applicable",
    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == "Enabled", 'Configured', 'Not Configured'),
    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),
    (type == "microsoft.apimanagement/service"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),
    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains "zrs", "Configured", "Not Configured"),
    (type == "microsoft.network/azurefirewalls"), iif(isnotnull(zones), "Configured", "Not Configured"),
    (type == "microsoft.network/frontdoors"), "Not Applicable",
    (type == "microsoft.cdn/profiles"), "Not Applicable",
    (type == "microsoft.network/applicationgateways"), iif(isnotnull(zones), "Configured", "Not Configured"),
    (type == "microsoft.network/loadbalancers"), case( 
    skuName =~ "Basic" or skuName =~ "Global", "Not Applicable",
    LbIpType =~ "Public", "Public IP AZ Config",
    tostring(LbAvZones) =~ "0", "Not Configured",
    tostring(LbAvZones)
    ),
    (type contains "publicip"), case( 
    skuName =~ "Basic" or skuName =~ "Global", "Not Applicable",
    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')
    ),
    (type == "microsoft.network/virtualnetworkgateways"), "Public IP AZ Config",
    (type == "microsoft.recoveryservices/vaults"), "Not Applicable",
    "Undefined"
    )
| extend avSets = case(
    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), "Not Applicable",
    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),
    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),
    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), "Not Applicable",
    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',
    type == 'microsoft.web/sites', 'Not Applicable',
    type == 'microsoft.web/serverfarms', 'Not Applicable',
    type == 'microsoft.containerservice/managedclusters', case(
    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), "Not Applicable",
    AvSets == 'Scale Sets', "A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.",
    "Scale Sets Not Configured"
    ),
    type == 'microsoft.sql/servers/databases', 'Not Applicable',
    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',
    type == 'microsoft.dbformysql/servers', "Not Applicable",
    type == 'microsoft.dbformysql/flexibleservers', "Not Applicable",
    type == 'microsoft.cache/redis', "Not Applicable",
    type == "microsoft.apimanagement/service", "Not Applicable",
    type contains "storageaccounts", "Not Applicable",
    type == "microsoft.network/azurefirewalls", "Not Applicable",
    type == "microsoft.network/frontdoors", "Not Applicable",
    type == "microsoft.cdn/profiles", "Not Applicable",
    type == "microsoft.network/applicationgateways", "Not Applicable",
    type == "microsoft.network/loadbalancers", "Not Applicable",
    type contains "publicip", tostring(properties.publicIPAddressVersion), //Field Override
    type == "microsoft.network/virtualnetworkgateways", tostring(properties.gatewayType), //Field Override
    type == "microsoft.recoveryservices/vaults", "Not Applicable",
    "Undefined"
    )
| extend Capacity = case(
    type == 'microsoft.compute/virtualmachines', "Not Applicable",
    type == 'microsoft.classiccompute/virtualmachines', "Not Applicable",
    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),
    type == 'microsoft.web/sites', "ASP Config",
    type == 'microsoft.web/serverfarms', tostring(sku.capacity),
    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), "0"), // AKS with or without VMSS
    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),
    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',
    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),
    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),
    type == 'microsoft.cache/redis', strcat(properties.sku.family, properties.sku.capacity),
    type == "microsoft.apimanagement/service", tostring(sku.capacity),
    type contains "storageaccounts", "Not Applicable", 
    type == "microsoft.network/azurefirewalls", "Not Applicable",
    type == "microsoft.network/frontdoors", "Not Applicable",
    type == "microsoft.cdn/profiles", "Not Applicable",
    type == "microsoft.network/applicationgateways", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),
    type == "microsoft.network/loadbalancers", "Not Applicable",
    type contains "publicip", iif(type == "microsoft.network/publicipprefixes", "PIP-prefix", "Single"), //Field Override
    type == "microsoft.network/virtualnetworkgateways", tostring(properties.sku.capacity),
    type == "microsoft.recoveryservices/vaults", "Not Applicable",
    "Undefined"
    )
| extend FaultDomain = case(
    type == 'microsoft.compute/virtualmachines', "Not Applicable",
    type == 'microsoft.classiccompute/virtualmachines', "Not Applicable",
    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, "0"),  // 1 - AZ, 5 - Regional VMSS
    type == 'microsoft.web/sites', "Not Applicable",
    type == 'microsoft.web/serverfarms', 'Not Applicable',
    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), "0"),
    type == 'microsoft.sql/servers/databases', "Not Applicable",
    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',
    type == 'microsoft.dbformysql/servers', 'Not Applicable',
    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',
    type == 'microsoft.cache/redis', 'Not Applicable',
    type == "microsoft.apimanagement/service", "Not Applicable",
    type contains "storageaccounts", "Not Applicable",
    type == "microsoft.network/azurefirewalls", "Not Applicable",
    type == "microsoft.network/frontdoors", "Not Applicable",
    type == "microsoft.cdn/profiles", "Not Applicable",
    type == "microsoft.network/applicationgateways", "Not Applicable",
    type == "microsoft.network/loadbalancers", "Not Applicable",
    type contains "publicip", "Not Applicable",
    type == "microsoft.network/virtualnetworkgateways", iff(properties.gatewayType == "ExpressRoute" and properties.vpnType == "PolicyBased", "ErPolicyBased", tostring(properties.vpnType)), //Field Override
    type == "microsoft.recoveryservices/vaults", "Not Applicable",
    "Undefined"
    )
| extend osDisk = case(
    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == "Local", "Ephemeral", properties.storageProfile.osDisk.managedDisk.storageAccountType),
    type == 'microsoft.classiccompute/virtualmachines', 'Classic',
    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == "Local", "Ephemeral", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),
    type == 'microsoft.web/sites', 'Not Applicable',
    type == 'microsoft.web/serverfarms', 'Not Applicable',
    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,
    type == 'microsoft.sql/servers/databases', properties.storageAccountType,
    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',
    type == 'microsoft.dbformysql/servers', 'Not Applicable',
    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',
    type == 'microsoft.cache/redis', 'Not Applicable',
    type == "microsoft.apimanagement/service", tostring(properties.platformVersion), //Field Override
    type contains "storageaccounts", tostring(split(skuName, '_', 0)[0]),
    type == "microsoft.network/azurefirewalls", "Not Applicable",
    type == "microsoft.network/frontdoors", "Not Applicable",
    type == "microsoft.cdn/profiles", "Not Applicable",
    type == "microsoft.network/applicationgateways", "Not Applicable",
    type == "microsoft.network/loadbalancers", tostring(LbIpType),  //Field Override
    type contains "publicip", tostring(properties.publicIPAllocationMethod), //Field Override
    type == "microsoft.network/virtualnetworkgateways", tostring(properties.vpnGatewayGeneration), //Field Override
    type == "microsoft.recoveryservices/vaults", "Not Applicable",
    'Not Applicable'
    )
| extend OSDisk = case(
    isnotempty(osDisk), osDisk,
    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state <> 'VM running', 'Unknown, start VM to get disk information.',
    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',
    "Unknown")
| extend ReadReplica = case (
    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), "Not Applicable",
    (type == 'microsoft.sql/servers/databases' and sku.tier <> 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB
    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), "Not Applicable", // Synapse
    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),
    type == 'microsoft.dbformysql/servers', "Not Applicable",
    type == 'microsoft.dbformysql/flexibleservers', "Not Applicable",
    type == 'microsoft.cache/redis', 'Not Applicable',
    type == "microsoft.apimanagement/service", tostring(properties.additionalLocations),
    type contains "storageaccounts", case(
        location in~ ('qatarcentral'), 'Not Applicable',
        split(skuName, '_', 1)[0] startswith "ra", "Configured",
        "Not Configured"
        ),
    type == "microsoft.network/azurefirewalls", "Not Applicable",
    type == "microsoft.network/frontdoors", "Not Applicable",
    type == "microsoft.cdn/profiles", "Not Applicable",
    type == "microsoft.network/applicationgateways", "Not Applicable",
    type == "microsoft.network/loadbalancers", "Not Applicable",
    type contains "publicip", "Not Applicable",
    type == "microsoft.network/virtualnetworkgateways", iff(properties.gatewayType == "ExpressRoute", "Not Applicable", tostring(properties.activeActive)), //Field Override,
    type == "microsoft.recoveryservices/vaults", "Not Applicable",
    "Undefined"
    )
| extend AutomaticFailover = case(
    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), "Not Applicable",
    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == "false" and properties.enableMultipleWriteLocations == "false" and toint(ReadReplica) > 1), "Not Configured",
    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == "true"), "Configured",
    (type == 'microsoft.documentdb/databaseaccounts'), "Not Applicable",
    type == 'microsoft.dbformysql/servers', "Not Applicable",
    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == "Enabled", "Configured", "Not Applicable"),
    type == 'microsoft.cache/redis', 'Not Applicable',
    type == "microsoft.apimanagement/service", "Not Applicable",
    type contains "storageaccounts", "Not Applicable",
    type == "microsoft.network/azurefirewalls", "Not Applicable",
    type == "microsoft.network/frontdoors", "Not Applicable",
    type == "microsoft.cdn/profiles", "Not Applicable",
    type == "microsoft.network/applicationgateways", iif(isnotempty(properties.autoscaleConfiguration), "Configured", "Not Configured"),
    type == "microsoft.network/loadbalancers", "Not Applicable",
    type contains "publicip", "Not Applicable",
    type == "microsoft.network/virtualnetworkgateways", "Not Applicable",
    type == "microsoft.recoveryservices/vaults", "Not Applicable",
    "Undefined"
    )
| extend MultipleWriteLocations = case(
    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), "Not Applicable",
    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == "false"), "Not Enabled",
    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == "true"), "Enabled",
    (type == 'microsoft.cache/redis'), 'Not Applicable',
    (type == "microsoft.apimanagement/service"), "Not Applicable",
    (type contains "storageaccounts"), "Not Applicable",
    (type == "microsoft.network/azurefirewalls"), "Not Applicable",
    (type == "microsoft.network/frontdoors"), "Not Applicable",
    (type == "microsoft.cdn/profiles"), "Not Applicable",
    (type == "microsoft.network/applicationgateways"), "Not Applicable",
    (type == "microsoft.network/loadbalancers"), "Not Applicable",
    (type contains "publicip"), "Not Applicable",
    (type == "microsoft.network/virtualnetworkgateways"), "Not Applicable",
    (type == "microsoft.recoveryservices/vaults"), "Not Applicable",
    "Undefined"
    )
| extend StorageAutogrow = case(
    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), "Not Applicable",
    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),
    (type == 'microsoft.dbformysql/flexibleservers'), "Not Applicable",
    (type == 'microsoft.cache/redis'), 'Not Applicable',
    (type == "microsoft.apimanagement/service"), "Not Applicable",
    (type contains "storageaccounts"), "Not Applicable",
    (type == "microsoft.network/azurefirewalls"), "Not Applicable",
    (type == "microsoft.network/frontdoors"), "Not Applicable",
    (type == "microsoft.cdn/profiles"), "Not Applicable",
    (type == "microsoft.network/applicationgateways"), "Not Applicable",
    (type == "microsoft.network/loadbalancers"), "Not Applicable",
    (type contains "publicip"), "Not Applicable",
    (type == "microsoft.network/virtualnetworkgateways"), "Not Applicable",
    (type == "microsoft.recoveryservices/vaults"), "Not Applicable",
    "Undefined"
    )
| extend ReplicationRole = case(
    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), "Not Applicable",
    (type == 'microsoft.sql/servers/databases' and sku.tier <> 'DataWarehouse'), iif(isnotempty(properties.secondaryType), "replica", "master"),
    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), "Not Applicable",
    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),
    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == "Enabled", 'Not Applicable', tostring(properties.replicationRole)),
    (type == 'microsoft.cache/redis'), 'Not Applicable',
    (type == "microsoft.apimanagement/service"), "Not Applicable",
    (type contains "storageaccounts"), tostring(split(skuName, '_', 1)[0]),
    (type == "microsoft.network/azurefirewalls"), "Not Applicable",
    (type == "microsoft.network/frontdoors"), "Not Applicable",
    (type == "microsoft.cdn/profiles"), "Not Applicable",
    (type == "microsoft.network/applicationgateways"), "Not Applicable",
    (type == "microsoft.network/loadbalancers"), "Not Applicable",
    (type contains "publicip"), "Not Applicable",
    (type == "microsoft.network/virtualnetworkgateways"), "Not Applicable",
    (type == "microsoft.recoveryservices/vaults"), "Not Applicable",
    "Undefined"
    )
| project 
    Type = tolower(type),
    SkuName = tolower(skuName),
    Kind = tolower(kind),
    SubscriptionId = subscriptionId,
    Name = tolower(tostring(id)),
    State = tolower(state),
    Location = tolower(location),
    ResourceGroup = resourceGroup,
    Zones = tolower(tostring(zones)),
    AvailabilityZone = tolower(avZones),
    AvailabilitySet = tolower(avSets),
    Capacity = tolower(Capacity),
    FaultDomain = tolower(FaultDomain),
    OSDisk = tolower(OSDisk),
    ReadReplica = tolower(ReadReplica), 
    AutomaticFailover = tolower(AutomaticFailover),
    MultipleWriteLocations = tolower(MultipleWriteLocations),
    StorageAutogrow = tolower(StorageAutogrow),
    ReplicationRole = tolower(ReplicationRole),
    Environment = environment,
    properties
| join kind = leftouter (
    securityresources
    | where properties.displayName contains "Azure Backup should"
    | extend Backup = tostring(properties.status.code)
    | project Name = tolower(tostring(properties.resourceDetails.Id)), Backup
    )
    on Name
| extend Backup = case(
    Backup == "Healthy" or Backup == "Unhealthy", Backup,
    "Unknown")
| extend Backup = case(
    (Type == 'microsoft.compute/virtualmachines') and (Backup == "Healthy" or Backup == "Unhealthy"), Backup, 
    (Type == "microsoft.compute/virtualmachinescalesets"), "Not Applicable", 
    (Type == "microsoft.containerservice/managedclusters"), "Not Applicable",
    (Type == 'microsoft.sql/servers/databases'), "Not Applicable", 
    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == "Geo", "Healthy", "Unhealthy"),
    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == "Enabled", "Healthy", "Unhealthy"),
    (Type contains "storageaccounts"), "Not Applicable",
    (Type == "microsoft.network/azurefirewalls"), "Not Applicable",
    (Type == "microsoft.recoveryservices/vaults"), "Not Applicable",
    "Unknown"
    )
| extend AvailabilitySet = case(
    AvailabilitySet == '-', 'None',
    isnotempty(AvailabilitySet), AvailabilitySet,
    "Unknown")