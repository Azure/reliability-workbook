extend ReliabilityScore = case(
    // VM - 4 checks // score = ("AZ + AS + Disk + Backup") * 100 / (3 * ResourceTotal) // AZ or AS is mutually exclusive, so VM should have either one
    Type == 'microsoft.compute/virtualmachines', (AvZoneCount + AvSetCount + PremorUltOSDiskCount + HealthyBackupCount) * 100 / (3 * ResourceTotal), 
    // Classic VM // score = 0 / ResourceTotal
    Type == 'microsoft.classiccompute/virtualmachines', 0,
    // VMSS - 3 checks  // score = (Capacity + Fault Domains + managed disk type) * 100 / (3 * ResourceTotal) //********* Future - Overprovision, Fault Domain State
    Type == 'microsoft.compute/virtualmachinescalesets', (Gt1CapacityCount + Gt0FaultDomainCount + PremorUltOSDiskCount) * 100 / (3 * ResourceTotal),
    // AppService & Function App - 2 checks // score = ("non dev/shared/free/ basic sku" + AppServiceRunningState) * 100 / (2 * ResourceTotal)
    Type == 'microsoft.web/sites', (OtherSku + RunningState) * 100 / (2 * ResourceTotal),
    // AppService Plan - 4 checks // score = ("non dev/shared/free/dynamic/basic sku" + AspReadyState + AZ + capacity) * 100 / (4 * ResourceTotal)
    Type == 'microsoft.web/serverfarms', (OtherSku + RunningState + AvZoneCount + NAAvZoneCount + Gt1CapacityCount) * 100 / (4 * ResourceTotal),
    // AKS - 4 checks // score = ("AZ" + "AS" + "Capacity" + "Disk") * 100 / (4 * ResourceTotal)  //********* Future - LB SKU // AZ or AS is mutually exclusive, so VM should have either one
    Type == 'microsoft.containerservice/managedclusters', (AvZoneCount + AvSetCount + Gt1CapacityCount + PremorUltOSDiskCount) * 100 / (3 * ResourceTotal),
    // SQLDB - 4 checks  // score = ("status" + "tier" + "storage acct. type"  + "AZ")* 100 / (5 * ResourceTotal)  //********* Future - "read replica count"
    Type == 'microsoft.sql/servers/databases', (DBOnlineStateCount + SqlPremiumOrBusinessCriticalOrDwh + DBGeoStorage + AvZoneCount + NAAvZoneCount) * 100 / (4 * ResourceTotal),
    // CosmosDB - 4 checks // score = ("status" + "readreplicacount" + "AZ" + "multiWrite" + "AutoFailover") * 100 / (5 * ResourceTotal) // included NA items to show compliance
    Type == 'microsoft.documentdb/databaseaccounts', (DBOnlineStateCount + Gt0DbReplica + AvZoneCount + NAAvZoneCount + EnabledDbMultiWrite + NADbMultiWrite + ConfiguredAutomaticFailover + NAAutomaticFailover) * 100 / (5 * ResourceTotal),
    // MySQL - 5 checks // score = ("status" + "sku" + "grsbackup" + "storageautogrow" + "replication") * 100 / (5 * ResourceTotal) //********* Future - "Sku family Gen5", read replica
    Type == 'microsoft.dbformysql/servers', (DBOnlineStateCount + OtherSku + HealthyBackupCount + EnabledStorageAutogrow + ReplicationEnabled) * 100 / (5 * ResourceTotal),
    // MySQL Flexible - 4 checks  // score = ("status" + "sku"  + "replication" + "HaEnabled") * 100 / (4 * ResourceTotal)    // included NA items to show compliance  //********* Future - "read replica", "automatic failover", "backup"
    Type == 'microsoft.dbformysql/flexibleservers', (DBOnlineStateCount + OtherSku + ReplicationEnabled + NAReplicationEnabled + AvZoneCount + NAAvZoneCount) * 100 / (4 * ResourceTotal),
    // PostgreSQL Flexible - 5 Checks // score = ("status" + "sku" + "AZ" + "HA" + "Geo Backup")
    Type == 'microsoft.dbforpostgresql/flexibleservers', (DBOnlineStateCount + OtherSku + (AvZoneCount + NAAvZoneCount) + (ConfiguredAutomaticFailover + NAAutomaticFailover) + (NABackupCount + EnabledBackupCount)) * 100 / (5 * ResourceTotal),
    // Redis - 4 checks // score = (state + sku + AZ + capacity(>=1)) * 100 / (4 * ResourceTotal)
    Type == 'microsoft.cache/redis', (SucceededStateCount + OtherSku + AvZoneCount + NAAvZoneCount + RedisDedicatedCapacityCount) * 100 / (4 * ResourceTotal),
    // APIM - 5 checks // score = ("Tier" + state + "capacity" + AZ + stv2platform) * 100 / (5 * ResourceTotal) 
    Type == 'microsoft.apimanagement/service', (OtherSku + SucceededStateCount + Gt1CapacityCount + AvZoneCount + Stv2ApimCount) * 100 / (5 * ResourceTotal),
    // Storage - 2 checks // score = ( "kind" + "replication type") * 100 / (2 * ResourceTotal)    //********* Future - "access tier hot"
    Type == 'microsoft.storage/storageaccounts' or Type == 'microsoft.classicstorage/storageaccounts', (V2StorageEnabled + RAStorageEnabled + NARAStorageEnabled) * 100 / (2 * ResourceTotal),
    // AzureFirewall - 1 check // score = (State + AZ) * 100 / (2 * ResourceTotal)
    Type == 'microsoft.network/azurefirewalls', (AzFWSucceededStateCount + AvZoneCount + NAAvZoneCount)* 100 / (2 * ResourceTotal),
    // AFD and CDN - 2 check // score = state + non-legacy-sku  * 100 / (2 * ResourceTotal)
    Type == 'microsoft.cdn/profiles' or Type == 'microsoft.network/frontdoors', (AfdActiveStateCount + AfdNonLegacySkuCount) * 100 / (2 * ResourceTotal),
    // AppGW - 5 checks    // score = (state + AZ + Tier + autoscaling + capacity) * 100 / (5 * ResourceTotal)
    Type == 'microsoft.network/applicationgateways', (RunningState + AvZoneCount + NAAvZoneCount + V2AppGwSkuCount + AutoScaleAppGwCount + Gt1CapacityCount) * 100 / (5 * ResourceTotal),
    // LB - 3 checks  // score = (SKU + state + AZ) * 100 / (3 * ResourceTotal)
    Type == 'microsoft.network/loadbalancers', (OtherSku + SucceededStateCount + AvZoneCount + NAAvZoneCount) * 100 / (3 * ResourceTotal),
    // Public IP - 3 checks // score = (SKU + state + AZ) * 100 / (3 * ResourceTotal)
    Type == 'microsoft.network/publicipaddresses', (OtherSku + SucceededStateCount + AvZoneCount + NAAvZoneCount) * 100 / (3 * ResourceTotal),
    // Public IP Prefix - 3 checks // score = (SKU + state + AZ) * 100 / (3 * ResourceTotal)
    Type == 'microsoft.network/publicipprefixes', (OtherSku + SucceededStateCount + AvZoneCount + NAAvZoneCount) * 100 / (3 * ResourceTotal),
    // VNET Gateway - 6 checks // score = (SKU + state + capacity + vpntype + generation + active-active) * 100 / (6 * ResourceTotal)
    Type == 'microsoft.network/virtualnetworkgateways', (AzVnetGwSkuCount + SucceededStateCount + Gt1CapacityCount + NACapacityCount + RouteVnetGwVpnTypeCount + Gen2VnetGwCount + NAGen2VnetGwCount + ActiveActiveVnetGwCount + NAActiveActiveVnetGwCount) * 100 / (6 * ResourceTotal),
    // ASR - 5 checks // score = (ASR succeeded status + ReplicationHealth + FailoverHealth + ProtectionStateDesc + ReplicationAgentUpdate) * 100 / (5 * ResourceTotal)
    // ASRs contain multiple VM resources that are configured for replication and therefore maintain status in each of them. If none of the VMs are replicated, both the OK status and the NG status will be null. This means that if the OK status is calculated in the same way as other resources, by adding the OK statuses, the score will be zero.
    // So, for ASR, if even one VM has an NG status, that status is treated as 0 and the score is calculated by subtracting the status of that status from 1.
    Type == 'microsoft.recoveryservices/vaults', ((1-NoAsrSucceededState) + (1-NoAsrSucceededReplHealth) + (1-NoAsrSucceededFailoverHealth) + (1-NoAsrSucceededProtectionStateDesc) + (1-NoAsrSucceededReplicationAgentUpdate)) * 100 / (5 * UniqueResourceTotal),
    0)
