resources
| where resourceGroup in ({ResourceGroup})
| extend criticality = case(tags.Criticality <> "", tags.Criticality,
    "Undefined")
| extend environment = case(
    tags.Environment <> "", tags.Environment,
    tags.environment <> "", tags.environment,
    tags.Env <> "", tags.Env,
    tags.env <> "", tags.env,
    tolower(name) contains "prod", "Production",
    tolower(name) contains "dev", "Development",
    tolower(name) contains "qa", "QA",
    tolower(name) contains "uat", "UAT",
    tolower(name) contains "sit", "SIT",
    tolower(name) contains "test", "Test",
    "Undefined")
| where criticality in ({Criticality})
| where environment in ({Environment})
| where 
    (type == 'microsoft.compute/virtualmachines') or 
    (type == "microsoft.compute/virtualmachinescalesets" and tags.aksEngineVersion !contains "aks-gomod") or
    (type == 'microsoft.web/sites') or 
    (type == "microsoft.containerservice/managedclusters") or 
    (type == 'microsoft.sql/servers/databases') or 
    (type == 'microsoft.documentdb/databaseaccounts') or 
    (type == 'microsoft.dbformysql/servers') or 
    (type == 'microsoft.dbformysql/flexibleservers') or 
    (type == "microsoft.apimanagement/service") or 
    (type == "microsoft.storage/storageaccounts" or type == "microsoft.classicstorage/storageaccounts") or 
    (type == "microsoft.network/azurefirewalls") or 
    (type == "microsoft.network/frontdoors") or 
    (type == "microsoft.network/applicationgateways") or 
    (type == "microsoft.network/loadbalancers") or 
    (type == "microsoft.recoveryservices/vaults")
| extend aksname = case(
    type == "microsoft.containerservice/managedclusters", tolower(tostring(name)),
    "Undefined"
    )
| join kind = leftouter (
    resources 
    | where type == "microsoft.compute/virtualmachinescalesets"
    | extend aksname = tolower(tostring(split(resourceGroup, "_")[2]))
    | extend AvZones = coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'), AvSets = "Scale Sets"
    )
    on aksname
| extend state = case(
    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),
    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),
    type == 'microsoft.web/sites', tostring(properties.state),
    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),
    type == 'microsoft.sql/servers/databases', tostring(properties.status),
    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),
    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),
    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),
    type == "microsoft.apimanagement/service", tostring(properties.provisioningState),
    type contains "storageaccounts", tostring(properties.provisioningState),
    type == "microsoft.network/azurefirewalls", tostring(properties.provisioningState),
    type == "microsoft.network/frontdoors", tostring(properties.resourceState),
    type == "microsoft.network/applicationgateways", tostring(properties.operationalState),
    type == "microsoft.network/loadbalancers", tostring(properties.provisioningState),
    type == "microsoft.recoveryservices/vaults", tostring(properties.provisioningState),
    "Undefined"
    )
| extend skuName = case(
    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),
    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),
    type == 'microsoft.web/sites', tostring(properties.sku),
    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),
    type == 'microsoft.sql/servers/databases', tostring(sku.tier),
    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),
    type == 'microsoft.dbformysql/servers', tostring(sku.tier),
    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),
    type == "microsoft.apimanagement/service", tostring(sku.name),
    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ "microsoft.storage/storageaccounts", sku.name, properties.accountType)))),
    type == "microsoft.network/azurefirewalls", tostring(properties.sku.name),
    type == "microsoft.network/frontdoors", "Not Applicable",
    type == "microsoft.network/applicationgateways", tostring(properties.sku.name),
    type == "microsoft.network/loadbalancers", tostring(sku.name),
    type == "microsoft.recoveryservices/vaults", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),
    "Undefined"
    )
| extend avZones = case(
    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia'), 'Not Applicable',
    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),
    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),
    (type == 'microsoft.containerservice/managedclusters' and AvZones <> ""), AvZones,
    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), "Not Configured",
    (type == 'microsoft.web/sites'), "Not Applicable",
    (type == 'microsoft.sql/servers/databases' and sku.tier <> 'DataWarehouse'), iif(isempty(properties.zoneRedundant) or properties.zoneRedundant == "false", 'Not Configured', 'Configured'),
    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), "Not Applicable",
    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == "false", 'Not Configured', 'Configured'), 
    (type == 'microsoft.dbformysql/servers'), "Not Applicable",
    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == "Enabled", 'Configured', 'Not Configured'),
    (type == "microsoft.apimanagement/service"), "Not Applicable",
    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] =~ "zrs", "Configured", "Not Configured"),
    (type == "microsoft.network/azurefirewalls"), iif(isnotnull(zones), "Configured", "Not Configured"),
    (type == "microsoft.network/frontdoors"), "Not Applicable",
    (type == "microsoft.network/applicationgateways"), iif(isnotnull(zones), "Configured", "Not Configured"),
    (type == "microsoft.network/loadbalancers"), case(
        skuName =~ "Basic", "Not Applicable",
        skuName =~ "Standard" and isnotnull(zones), "Configured",
        "Not Configured"
    ),
    (type == "microsoft.recoveryservices/vaults"), "Not Applicable",
    "Undefined"
    )
| extend avSets = case(
    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), "Not Applicable",
    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),
    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), "Not Applicable",
    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',
    type == 'microsoft.web/sites', 'Not Applicable',
    type == 'microsoft.containerservice/managedclusters', case(
        AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), "Not Applicable",
        AvSets == 'Scale Sets', "A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.",
        "Scale Sets Not Configured"
    ),
    type == 'microsoft.sql/servers/databases', 'Not Applicable',
    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',
    type == 'microsoft.dbformysql/servers', "Not Applicable",
    type == 'microsoft.dbformysql/flexibleservers', "Not Applicable",
    type == "microsoft.apimanagement/service", "Not Applicable",
    type contains "storageaccounts", "Not Applicable",
    type == "microsoft.network/azurefirewalls", "Not Applicable",
    type == "microsoft.network/frontdoors", "Not Applicable",
    type == "microsoft.network/applicationgateways", "Not Applicable",
    type == "microsoft.network/loadbalancers", "Not Applicable",
    type == "microsoft.recoveryservices/vaults", "Not Applicable",
    "Undefined"
    )
| extend Capacity = case(
    type == 'microsoft.compute/virtualmachines', "Not Applicable",
    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),
    type == 'microsoft.web/sites', "Not Applicable",
    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(sku1.capacity), tostring(sku1.capacity), "0"), // AKS with or without VMSS
    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),
    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',
    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),
    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),
    type == "microsoft.apimanagement/service", tostring(sku.capacity),
    type contains "storageaccounts", "Not Applicable", 
    type == "microsoft.network/azurefirewalls", "Not Applicable",
    type == "microsoft.network/frontdoors", "Not Applicable",
    type == "microsoft.network/applicationgateways", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),
    type == "microsoft.network/loadbalancers", "Not Applicable",
    type == "microsoft.recoveryservices/vaults", "Not Applicable",
    "Undefined"
    )
| extend FaultDomain = case(
    type == 'microsoft.compute/virtualmachines', "Not Applicable",
    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, "0"),    // 1 - AZ, 5 - Regional VMSS
    type == 'microsoft.web/sites', "Not Applicable",
    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(properties1.platformFaultDomainCount), properties1.platformFaultDomainCount, "0"),
    type == 'microsoft.sql/servers/databases', "Not Applicable",
    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',
    type == 'microsoft.dbformysql/servers', 'Not Applicable',
    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',
    type == "microsoft.apimanagement/service", "Not Applicable",
    type contains "storageaccounts", "Not Applicable",
    type == "microsoft.network/azurefirewalls", "Not Applicable",
    type == "microsoft.network/frontdoors", "Not Applicable",
    type == "microsoft.network/applicationgateways", "Not Applicable",
    type == "microsoft.network/loadbalancers", "Not Applicable",
    type == "microsoft.recoveryservices/vaults", "Not Applicable",
    "Undefined"
    )
| extend osDisk = case(
    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == "Local", "Ephemeral",  properties.storageProfile.osDisk.managedDisk.storageAccountType),
    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == "Local", "Ephemeral",  properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),
    type == 'microsoft.web/sites', 'Not Applicable',
    type == 'microsoft.containerservice/managedclusters', iff(properties.agentPoolProfiles[0].osDiskType == 'Ephemeral', 'Ephemeral', properties1.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),
    type == 'microsoft.sql/servers/databases', properties.storageAccountType,
    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',
    type == 'microsoft.dbformysql/servers', 'Not Applicable',
    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',
    type == "microsoft.apimanagement/service", "Not Applicable",
    type contains "storageaccounts", tostring(split(skuName, '_', 0)[0]),
    type == "microsoft.network/azurefirewalls", "Not Applicable",
    type == "microsoft.network/frontdoors", "Not Applicable",
    type == "microsoft.network/applicationgateways", "Not Applicable",
    type == "microsoft.network/loadbalancers", "Not Applicable",
    type == "microsoft.recoveryservices/vaults", "Not Applicable",
    'Not Applicable'
    )
| extend OSDisk = case(
    isnotempty(osDisk), osDisk,
    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state <> 'VM running', 'Unknown, start VM to get disk information.',
    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',
    "Unknown")
| extend ReadReplica = case (
    type in ('microsoft.compute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.containerservice/managedclusters'), "Not Applicable",
    (type == 'microsoft.sql/servers/databases' and sku.tier <> 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB
    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), "Not Applicable", // Synapse
    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),
    type == 'microsoft.dbformysql/servers', "Not Applicable",
    type == 'microsoft.dbformysql/flexibleservers', "Not Applicable",
    type == "microsoft.apimanagement/service", tostring(properties.additionalLocations),
    type contains "storageaccounts", case(split(skuName, '_', 1)[0] =~ "ragrs", "Configured", "Not Configured"),
    type == "microsoft.network/azurefirewalls", "Not Applicable",
    type == "microsoft.network/frontdoors", "Not Applicable",
    type == "microsoft.network/applicationgateways", "Not Applicable",
    type == "microsoft.network/loadbalancers", "Not Applicable",
    type == "microsoft.recoveryservices/vaults", "Not Applicable",
    "Undefined"
    )
| extend AutomaticFailover = case(
    type in ('microsoft.compute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), "Not Applicable",
    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == "false" and properties.enableMultipleWriteLocations == "false" and toint(ReadReplica) > 1), "Not Configured",
    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == "true"), "Configured",
    (type == 'microsoft.documentdb/databaseaccounts'), "Not Applicable",
    type == 'microsoft.dbformysql/servers', "Not Applicable",
    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == "Enabled", "Configured", "Not Applicable"),
    type == "microsoft.apimanagement/service", "Not Applicable",
    type contains "storageaccounts", "Not Applicable",
    type == "microsoft.network/azurefirewalls", "Not Applicable",
    type == "microsoft.network/frontdoors", "Not Applicable",
    type == "microsoft.network/applicationgateways", iif(isnotempty(properties.autoscaleConfiguration), "Configured", "Not Configured"),
    type == "microsoft.network/loadbalancers", "Not Applicable",
    type == "microsoft.recoveryservices/vaults", "Not Applicable",
    "Undefined"
    )
| extend MultipleWriteLocations = case(
    type in ('microsoft.compute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers'), "Not Applicable",
    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == "false"), "Not Enabled",
    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == "true"), "Enabled",
    (type == "microsoft.apimanagement/service"), "Not Applicable",
    (type contains "storageaccounts"), "Not Applicable",
    (type == "microsoft.network/azurefirewalls"), "Not Applicable",
    (type == "microsoft.network/frontdoors"), "Not Applicable",
    (type == "microsoft.network/applicationgateways"), "Not Applicable",
    (type == "microsoft.network/loadbalancers"), "Not Applicable",
    type == "microsoft.recoveryservices/vaults", "Not Applicable",
    "Undefined"
    )
| extend StorageAutogrow = case(
    type in ('microsoft.compute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), "Not Applicable",
    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),
    (type == 'microsoft.dbformysql/flexibleservers'), "Not Applicable",
    (type == "microsoft.apimanagement/service"), "Not Applicable",
    (type contains "storageaccounts"), "Not Applicable",
    (type == "microsoft.network/azurefirewalls"), "Not Applicable",
    (type == "microsoft.network/frontdoors"), "Not Applicable",
    (type == "microsoft.network/applicationgateways"), "Not Applicable",
    (type == "microsoft.network/loadbalancers"), "Not Applicable",
    type == "microsoft.recoveryservices/vaults", "Not Applicable",
    "Undefined"
    )
| extend ReplicationRole = case(
    type in ('microsoft.compute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), "Not Applicable",
	(type == 'microsoft.sql/servers/databases' and sku.tier <> 'DataWarehouse'), iif(isnotempty(properties.secondaryType), "replica", "master"),
	(type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), "Not Applicable",
    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),
    (type == 'microsoft.dbformysql/flexibleservers'), iif(properties.haEnabled == "Enabled", 'Not Applicable', tostring(properties.replicationRole)),
    (type == "microsoft.apimanagement/service"), "Not Applicable",
    (type contains "storageaccounts"), tostring(split(skuName, '_', 1)[0]),
    (type == "microsoft.network/azurefirewalls"), "Not Applicable",
    (type == "microsoft.network/frontdoors"), "Not Applicable",
    (type == "microsoft.network/applicationgateways"), "Not Applicable",
    (type == "microsoft.network/loadbalancers"), "Not Applicable",
    (type == "microsoft.recoveryservices/vaults"), "Not Applicable",
    "Undefined"
    )
| project 
    Type = tolower(type),
    SkuName = tolower(skuName),
    Kind = tolower(kind),
    SubscriptionId = subscriptionId,
    Name = tolower(name),
    State = tolower(state),
    Location = tolower(location),
    ResourceGroup = resourceGroup,
    Zones = tolower(tostring(zones)),
    AvailabilityZone = tolower(avZones),
    AvailabilitySet = tolower(avSets),
    Capacity = tolower(Capacity),
    FaultDomain = tolower(FaultDomain),
    OSDisk = tolower(OSDisk),
    ReadReplica = tolower(ReadReplica), 
    AutomaticFailover = tolower(AutomaticFailover),
    MultipleWriteLocations = tolower(MultipleWriteLocations),
    StorageAutogrow = tolower(StorageAutogrow),
    ReplicationRole = tolower(ReplicationRole),
    Criticality = criticality,
    Environment = environment,
    ResourceId = tolower(tostring(id)),
    properties
| join kind = leftouter (
    securityresources
    | where properties.displayName contains "Azure Backup should"
    | extend Backup = tostring(properties.status.code)
    | project ResourceId = tolower(tostring(properties.resourceDetails.Id)), Backup
    )
    on ResourceId
| extend Backup = case(
    Backup == "Healthy" or Backup == "Unhealthy", Backup,
    "Unknown")
| extend Backup = case(
    (Type == 'microsoft.compute/virtualmachines') and (Backup == "Healthy" or Backup == "Unhealthy"), Backup, 
    (Type == "microsoft.compute/virtualmachinescalesets"), "Not Applicable", 
    (Type == "microsoft.containerservice/managedclusters"), "Not Applicable",
    (Type == 'microsoft.sql/servers/databases'), "Not Applicable", 
    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == "Geo", "Healthy", "Unhealthy"),
    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == "Enabled", "Healthy", "Unhealthy"),
    (Type contains "storageaccounts"), "Not Applicable",
    (Type == "microsoft.network/azurefirewalls"), "Not Applicable",
    (Type == "microsoft.recoveryservices/vaults"), "Not Applicable",
    "Unknown"
    )
| extend AvailabilitySet = case(
    AvailabilitySet == '-', 'None',
    isnotempty(AvailabilitySet), AvailabilitySet,
    "Unknown")
| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Criticality, Environment, ResourceId
| summarize 
    ResourceTotal=count(ResourceId),
    OtherSku=dcountif(ResourceId, ((SkuName !contains "shared") and (SkuName !contains "free") and (SkuName !contains "basic") and (SkuName !contains "develop"))),
    DevelopmentSkuCount=dcountif(ResourceId, SkuName contains "develop"), 
    SharedSkuCount=dcountif(ResourceId, SkuName contains "shared"),
    FreeSkuCount=dcountif(ResourceId, SkuName contains "free"),
    BasicSkuCount=dcountif(ResourceId, SkuName contains "basic"), 
    SqlPremiumOrBusinessCriticalOrDwh=dcountif(ResourceId, Type == 'microsoft.sql/servers/databases' and (SkuName contains "premium" or SkuName contains "businesscritical" or SkuName contains "datawarehouse")), 
    VMDeallocatedStateCount=dcountif(ResourceId, State contains "vm deallocated"),
    NoAvZoneCount=dcountif(ResourceId, (AvailabilityZone contains "not configured")),
    NAAvZoneCount=dcountif(ResourceId, (AvailabilityZone contains "not applicable")),
    AvZoneCount=dcountif(ResourceId, (AvailabilityZone in ('1', '2', '3', 'configured'))),
    NoAvSetCount=dcountif(ResourceId, (AvailabilitySet contains "none") or (AvailabilitySet contains "not configured")),
    NAAvSetCount=dcountif(ResourceId, AvailabilitySet contains "not applicable"),
    AvSetCount=dcountif(ResourceId, (AvailabilitySet !contains "none") and (AvailabilitySet !contains "not applicable") and (AvailabilitySet !contains "not configured")),
    NACapacityCount=dcountif(ResourceId, (Capacity contains "not applicable")),
    ZeroCapacityCount=dcountif(ResourceId, (Capacity contains "0")),
    Gt1CapacityCount=dcountif(ResourceId, (Capacity !contains "not applicable") and (Capacity !contains "0") and (Capacity !contains "1") and (Capacity !contains "undefined")),
    NAFaultDomainCount=dcountif(ResourceId, (FaultDomain contains "not applicable")),
    ZeroFaultDomainCount=dcountif(ResourceId, (FaultDomain contains "0")),
    Gt0FaultDomainCount=dcountif(ResourceId, (FaultDomain !contains "not applicable") and (FaultDomain !contains "0") and (FaultDomain !contains "undefined")),
    NAOSDiskCount=dcountif(ResourceId, (OSDisk contains "not applicable")),
    UnknownOSDiskCount=dcountif(ResourceId, (OSDisk contains "Unknown")),
    OtherOSDiskCount=dcountif(ResourceId, (OSDisk !contains "premium") and (OSDisk !contains "ultra") and (OSDisk !contains "ephemeral") and (OSDisk !contains "not applicable")),
    PremorUltOSDiskCount=dcountif(ResourceId, (OSDisk contains "premium") or (OSDisk contains "ultra") or (OSDisk contains "ephemeral")),
    NABackupCount=dcountif(ResourceId, (Backup contains "not applicable")),
    UnknownBackupCount=dcountif(ResourceId, (Backup contains "Unknown")),
    HealthyBackupCount=dcountif(ResourceId, (Backup == "healthy")),
    UnhealthyBackupCount=dcountif(ResourceId, (Backup == "unhealthy")),
    RunningState=dcountif(ResourceId, State contains "running"),
    DBOnlineStateCount=dcountif(ResourceId, State contains "online" or State contains "ready"),
    DBPausedStateCount=dcountif(ResourceId, State contains "paused"),
    DBGeoStorage=dcountif(ResourceId, OSDisk == "grs"),
    DBLrsStorage=dcountif(ResourceId, OSDisk == "lrs"),
    Gt0DbReplica=dcountif(ResourceId, (ReadReplica !contains "not applicable") and (ReadReplica !contains "0") and (ReadReplica !contains "undefined")),
    Lt1DbReplica=dcountif(ResourceId, ReadReplica contains "0"),
    NotEnabledDbMultiWrite=dcountif(ResourceId, MultipleWriteLocations contains "not enabled"),
    NADbMultiWrite=dcountif(ResourceId, MultipleWriteLocations contains "not applicable"),
    EnabledDbMultiWrite=dcountif(ResourceId, MultipleWriteLocations == "enabled"),
    NotConfiguredAutomaticFailover=dcountif(ResourceId, AutomaticFailover == "not configured"),
    ConfiguredAutomaticFailover=dcountif(ResourceId, AutomaticFailover == "configured"),
    NAAutomaticFailover=dcountif(ResourceId, AutomaticFailover == "not applicable"),
    EnabledStorageAutogrow=dcountif(ResourceId, StorageAutogrow == "enabled"),
    NotEnabledStorageAutogrow=dcountif(ResourceId, StorageAutogrow != "enabled" and Type != "microsoft.dbformysql/flexibleservers"),
    ReplicationEnabled=dcountif(ResourceId, ReplicationRole == "master" or ReplicationRole == "replica"),
    NAReplicationEnabled=dcountif(ResourceId, ReplicationRole == "none" and AvailabilityZone != "enabled" and Type == "microsoft.dbformysql/flexibleservers"),
    NoReplicationEnabled=dcountif(ResourceId, ReplicationRole == "none" and AvailabilityZone != "enabled"),
    RAStorageEnabled=dcountif(ResourceId, ReplicationRole startswith "ra" and Type contains 'storageaccounts'),
    NoRAStorageEnabled=dcountif(ResourceId, ReplicationRole !startswith "ra" and Type contains 'storageaccounts'),
    V2StorageEnabled=dcountif(ResourceId, Kind == "StorageV2" and Type contains 'storageaccounts'),
    NoV2StorageEnabled=dcountif(ResourceId, Kind != "StorageV2" and Type contains 'storageaccounts'),
    AFDEnabledStateCount=dcountif(ResourceId, State == "enabled" and Type == 'microsoft.network/frontdoors'),
    NoAFDEnabledStateCount=dcountif(ResourceId, State != "enabled" and Type == 'microsoft.network/frontdoors'),
    SmallAppGwSkuCount=dcountif(ResourceId, SkuName contains "small" and Type == 'microsoft.network/applicationgateways'), 
    OtherAppGwSkuCount=dcountif(ResourceId, SkuName !contains "small" and Type == 'microsoft.network/applicationgateways'),
    AutoScaleAppGwCount=dcountif(ResourceId, AutomaticFailover == "configured" and Type == 'microsoft.network/applicationgateways'),
    NoAutoScaleAppGwCount=dcountif(ResourceId, AutomaticFailover == "not configured" and Type == 'microsoft.network/applicationgateways'),
    AsrSucceededState=dcountif(ResourceId, State == "succeeded" and Type == 'microsoft.recoveryservices/vaults'),
    NoAsrSucceededState=dcountif(ResourceId, State != "succeeded" and Type == 'microsoft.recoveryservices/vaults')
    by Type, Environment, Criticality
| ${score}
    | project Type, Environment, Criticality, ResourceTotal, score=toint(ReliabilityScore)
    | summarize WorkbookScore=round(avg(score),1) | project WorkbookScore