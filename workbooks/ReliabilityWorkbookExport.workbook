{
    "version": "Notebook/1.0",
    "items": [
      {
        "type": 12,
        "content": {
          "version": "NotebookGroup/1.0",
          "groupType": "editable",
          "items": [
            {
              "type": 9,
              "content": {
                  "version": "KqlParameterItem/1.0",
                  "parameters": [
                  {
                      "id": "aa0176d8-14ff-4dc5-9ae7-b8029f565674",
                      "version": "KqlParameterItem/1.0",
                      "name": "Subscriptions",
                      "label": "Subscriptions",
                      "type": 6,
                      "isRequired": true,
                      "multiSelect": true,
                      "quote": "'",
                      "delimiter": ",",
                      "typeSettings": {
                      "additionalResourceOptions": [
                          "value::all"
                      ],
                      "includeAll": false,
                      "showDefault": false
                      },
                      "defaultValue": "value::all"
                  },
                  {
                      "id": "91aa9ba3-ed60-4472-8dd9-1c2cb6255757",
                      "version": "KqlParameterItem/1.0",
                      "name": "ResourceGroup",
                      "label": "Resource Group",
                      "type": 2,
                      "isRequired": true,
                      "multiSelect": true,
                      "quote": "'",
                      "delimiter": ",",
                      "query": "resources\r\n| distinct resourceGroup",
                      "crossComponentResources": [
                      "{Subscriptions}"
                      ],
                      "typeSettings": {
                      "additionalResourceOptions": [
                          "value::all"
                      ],
                      "showDefault": false
                      },
                      "defaultValue": "value::all",
                      "queryType": 1,
                      "resourceType": "microsoft.resourcegraph/resources"
                  },
                  {
                      "id": "5a4f6d34-9f89-4ef8-b4ee-fb0580ec016d",
                      "version": "KqlParameterItem/1.0",
                      "name": "Environment",
                      "label": "Environment",
                      "type": 2,
                      "multiSelect": true,
                      "quote": "'",
                      "delimiter": ",",
                      "query": "resources\r\n| extend Environment = case(\r\ntags.Environment <> \"\", tags.Environment,\r\ntags.environment <> \"\", tags.environment,\r\ntags.Env <> \"\", tags.Env,\r\ntags.env <> \"\", tags.env,\r\ntolower(name) contains \"prod\", \"Production\",\r\ntolower(name) contains \"dev\", \"Development\",\r\ntolower(name) contains \"qa\", \"QA\",\r\ntolower(name) contains \"uat\", \"UAT\",\r\ntolower(name) contains \"sit\", \"SIT\",\r\ntolower(name) contains \"test\", \"Test\",\r\n\"Undefined\")\r\n| distinct Environment",
                      "crossComponentResources": [
                      "{Subscriptions}"
                      ],
                      "typeSettings": {
                      "additionalResourceOptions": [
                          "value::all"
                      ],
                      "showDefault": false
                      },
                      "defaultValue": "value::all",
                      "queryType": 1,
                      "resourceType": "microsoft.resourcegraph/resources"
                  },
                  {
                      "id": "9d6afcdc-172c-4bef-8bab-dc372c5d3bb4",
                      "version": "KqlParameterItem/1.0",
                      "name": "TagName",
                      "label": "Tag Name",
                      "multiSelect": true,
                      "quote": "'",
                      "delimiter": ",",
                      "type": 2,
                      "query": "Resources\r\n| where tags != '' and tags != '[]'\r\n| mvexpand tags\r\n| extend tagName = tostring(bag_keys(tags)[0])\r\n| distinct tagName\r\n| sort by tagName asc",
                      "crossComponentResources": [
                      "{Subscriptions}"
                      ],
                      "typeSettings": {
                        "additionalResourceOptions": [
                          "value::all"
                        ],
                        "selectAllValue": "*"
                      },
                      "queryType": 1,
                      "resourceType": "microsoft.resourcegraph/resources",
                      "value": [
                        "value::all"
                      ]
                  },
                  {
                      "id": "95781001-338b-4ed3-81dc-ce16f2a98bf0",
                      "version": "KqlParameterItem/1.0",
                      "name": "TagValue",
                      "label": "Tag Value",
                      "type": 2,
                      "multiSelect": true,
                      "quote": "'",
                      "delimiter": ",",
                      "query": "Resources\r\n| mvexpand tags\r\n| extend tagName = tostring(bag_keys(tags)[0])\r\n| extend tagValue = tostring(tags[tagName])\r\n| where tags != '' and tags != '[]'  \r\n| where ('*' in (dynamic([{TagName}])) or tagName in (dynamic([{TagName}]))) \r\n| distinct tagValue\r\n| sort by tagValue asc",
                      "crossComponentResources": [
                      "{Subscriptions}"
                      ],
                      "typeSettings": {
                        "additionalResourceOptions": [
                          "value::all"
                        ],
                        "selectAllValue": "*"
                      },
                      "queryType": 1,
                      "resourceType": "microsoft.resourcegraph/resources",
                      "value": [
                        "value::all"
                      ]
                  },
                  {
                      "id": "e929bc01-08ec-45fe-bc6a-4e0267460dfa",
                      "version": "KqlParameterItem/1.0",
                      "name": "SLA",
                      "label": "Show SLA",
                      "type": 10,
                      "description": "This will show the SLA information for the focus area",
                      "isRequired": true,
                      "typeSettings": {
                      "additionalResourceOptions": [],
                      "showDefault": false
                      },
                      "jsonData": "[{ \"value\": \"Yes\", \"label\": \"Yes\", \"selected\":true},\r\n {\"value\": \"No\", \"label\": \"No\"}]"
                  },
                  {
                      "id": "9581cbc6-0f0f-42be-8ae8-6fe94de00ab8",
                      "version": "KqlParameterItem/1.0",
                      "name": "Help",
                      "label": "Show Help",
                      "type": 10,
                      "isRequired": true,
                      "typeSettings": {
                      "additionalResourceOptions": []
                      },
                      "jsonData": "[{\"value\": \"Yes\", \"label\": \"Yes\", \"selected\":true },\r\n {\"value\": \"No\", \"label\": \"No\"}]"
                  }
                  ],
                  "style": "pills",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
              },
              "name": "parameters - 13"
            },
            {
              "type": 12,
              "content": {
                "version": "NotebookGroup/1.0",
                "groupType": "editable",
                "items": [
                  {
                    "type": 3,
                    "content": {
                      "version": "KqlItem/1.0",
                      "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = inner(\n    resources\n    | extend tagName = tostring(bag_keys(tags)[0])\n    | extend tagValue = tostring(tags[tagName])\n    | distinct tagName,tagValue,id\n    | where (('*' in (dynamic([{TagName}])) or tagName in (dynamic([{TagName}])))) and (('*' in (dynamic([{TagValue}])) or tagValue in (dynamic([{TagValue}]))))\n    | distinct id\n)\non id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or\n    (type == 'microsoft.dbforpostgresql/servers') or \n    (type == 'microsoft.dbforpostgresql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.dbforpostgresql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbforpostgresql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.dbforpostgresql/servers', tostring(sku.tier),\n    type == 'microsoft.dbforpostgresql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    // reffer to: https://learn.microsoft.com/en-us/azure/reliability/availability-zones-service-support#azure-regions-with-availability-zone-support\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'polandcentral', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3', 'italynorth', 'israelcentral'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), case( //SQL AZ SKU \u0026 region availability filter\n        sku.tier == 'Basic' or sku.tier == 'Standard' or sku.name == 'System', 'Not Applicable',\n        // Outside of these regions, SQL DB is not available in AZ. Refer to: https://learn.microsoft.com/en-us/azure/azure-sql/database/high-availability-sla?view=azuresql\u0026tabs=azure-powershell#general-purpose-service-tier-zone-redundant-availability\n        sku.tier == 'GeneralPurpose' and location !in~ ('brazilsouth', 'eastus', 'eastus2', 'southcentralus', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'polandcentral', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3', 'italynorth', 'israelcentral'), 'Not Applicable',\n        properties.zoneRedundant == 'true', 'Configured',\n        'Not Configured'\n    ),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'),case(\n        properties.highAvailability.mode == \"ZoneRedundant\", \"Configured\",\n        properties.replicationRole == \"Replica\", \"Not Applicable\",\n        'Not Configured'\n    ),\n    (type == 'microsoft.dbforpostgresql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbforpostgresql/flexibleservers'),case(\n        properties.highAvailability.mode == \"ZoneRedundant\", \"Configured\",\n        properties.replicationRole == \"Replica\", \"Not Applicable\",\n        'Not Configured'\n    ),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/servers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.dbforpostgresql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbforpostgresql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', strcat(properties.sku.family, properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.dbforpostgresql/servers', 'Not Applicable',\n    type == 'microsoft.dbforpostgresql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.currentBackupStorageRedundancy,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.dbforpostgresql/servers', 'Not Applicable',\n    type == 'microsoft.dbforpostgresql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/servers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        // Use the following query to get 3+0 regions: az account list-locations -o table --query '[?availabilityZoneMappings \u0026\u0026 (!metadata.pairedRegion || length(metadata.pairedRegion) == `0`)]'\n        location in~ ('qatarcentral', 'polandcentral', 'israelcentral', 'italynorth') and split(skuName, '_', 1)[0] startswith \"zrs\" , 'Configured',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(\n        properties.highAvailability.mode == \"Disabled\" and properties.replicationRole != \"Replica\" , \"Not Configured\",\n        properties.replicationRole == \"Replica\", \"Not Applicable\",\n        properties.highAvailability.mode == \"ZoneRedundant\", \"Zone Redundant\",\n        properties.highAvailability.mode == \"SameZone\", \"Same Zone\",\n        properties.highAvailability.mode\n    ),\n    type == 'microsoft.dbforpostgresql/servers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/flexibleservers', case(    \n    properties.highAvailability.mode == \"Disabled\" and properties.replicationRole !contains \"AsyncReplica\", \"Not Configured\",\n        properties.replicationRole == \"GeoAsyncReplica\", \"Not Applicable\",\n        properties.replicationRole == \"AsyncReplica\", \"Not Applicable\",\n        properties.highAvailability.mode == \"ZoneRedundant\", \"Zone Redundant\",\n        properties.highAvailability.mode == \"SameZone\", \"Same Zone\",\n        properties.highAvailability.mode\n    ),\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers', 'microsoft.dbforpostgresql/servers', 'microsoft.dbforpostgresql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.dbforpostgresql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbforpostgresql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbforpostgresql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbforpostgresql/flexibleservers'), tostring(properties.replicationRole),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    recoveryservicesresources\n    | extend vmId = case(\n        properties.backupManagementType == \"AzureIaasVM\", tolower(tostring(properties.dataSourceInfo.resourceID)),\n        type == \"microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotecteditems\", tolower(tostring(properties.providerSpecificDetails.dataSourceInfo.resourceId)),\n        ''\n    )\n    | extend asrId = iff(type == \"microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotecteditems\", tolower(tostring(strcat_array(array_slice(split(properties.recoveryFabricId, '/'), 0, 8), '/'))), '')\n    | extend resourceId = case(\n        properties.backupManagementType == \"AzureIaasVM\", vmId,\n        type == \"microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotecteditems\", asrId,\n        ''\n    )\n    | extend Backup = tostring(properties.protectionStatus)\n    | extend replicationHealth = properties.replicationHealth\n    | extend failoverHealth = properties.failoverHealth\n    | extend protectionStateDescription = properties.protectionStateDescription\n    | extend isReplicationAgentUpdateRequired = properties.providerSpecificDetails.isReplicationAgentUpdateRequired\n    | project resourceId, vmId, asrId, Backup, replicationHealth, failoverHealth, protectionStateDescription, isReplicationAgentUpdateRequired\n  )\n  on $left.Name == $right.resourceId\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines'), iif(Backup == \"Unknown\", \"Not Configured\", Backup),\n    (Type == 'microsoft.classiccompute/virtualmachines'), iif(Backup == \"Unknown\", \"Not Configured\", Backup),\n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.type!=\"Continuous\",iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Geo\", \"Not Geo\"),\"Continuous\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/flexibleservers'), properties.backup.geoRedundantBackup,\n    (Type == 'microsoft.dbforpostgresql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbforpostgresql/flexibleservers'), case(\n        properties.backup.geoRedundantBackup == \"Disabled\" and properties.replicationRole !contains \"AsyncReplica\", \"Disabled\",\n        properties.replicationRole == \"GeoAsyncReplica\", \"Not Applicable\",\n        properties.replicationRole == \"AsyncReplica\", \"Not Applicable\",\n        properties.backup.geoRedundantBackup\n    ),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n\n| project Type, SkuName, Kind, SubscriptionId, Name, State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment\n| sort by Type\n| summarize \n    ResourceTotal=count(Name),\n    OtherSku=dcountif(Name, ((SkuName !contains \"shared\") and (SkuName !contains \"free\") and (SkuName !contains \"basic\") and (SkuName !contains \"develop\") and (SkuName !contains \"dynamic\"))),\n    DevelopmentSkuCount=dcountif(Name, SkuName contains \"develop\"), \n    SharedSkuCount=dcountif(Name, SkuName contains \"shared\"),\n    FreeSkuCount=dcountif(Name, SkuName contains \"free\"),\n    BasicSkuCount=dcountif(Name, SkuName contains \"basic\"), \n    PremiumSkuCount=dcountif(Name, SkuName contains \"premium\"), \n    EnterpriseSkuCount=dcountif(Name, SkuName contains \"enterprise\"), \n    SqlPremiumOrBusinessCriticalOrDwh=dcountif(Name, Type == 'microsoft.sql/servers/databases' and (SkuName contains \"premium\" or SkuName contains \"businesscritical\" or SkuName contains \"datawarehouse\")), \n    VMDeallocatedStateCount=dcountif(Name, State contains \"vm deallocated\"),\n    NoAvZoneCount=dcountif(Name, (AvailabilityZone contains \"not configured\")),\n    NAAvZoneCount=dcountif(Name, (AvailabilityZone contains \"not applicable\") or (AvailabilityZone contains \"az config\")),\n    AvZoneCount=dcountif(Name, (AvailabilityZone in ('1', '2', '3', 'configured'))),\n    NoAvSetCount=dcountif(Name, (AvailabilitySet contains \"none\") or (AvailabilitySet contains \"not configured\")),\n    NAAvSetCount=dcountif(Name, AvailabilitySet contains \"not applicable\"),\n    AvSetCount=dcountif(Name, (AvailabilitySet !contains \"none\") and (AvailabilitySet !contains \"not applicable\") and (AvailabilitySet !contains \"not configured\")),\n    NACapacityCount=dcountif(Name, (Capacity contains \"not applicable\")),\n    ZeroCapacityCount=dcountif(Name, (Capacity contains \"0\")),\n    Gt1CapacityCount=dcountif(Name, (Capacity !contains \"not applicable\") and (Capacity !contains \"0\") and (Capacity !contains \"1\") and (Capacity !contains \"undefined\")),\n    RedisDedicatedCapacityCount=dcountif(Name, (Capacity !contains \"not applicable\") and (Capacity !contains \"0\") and (Capacity !contains \"undefined\")),\n    NAFaultDomainCount=dcountif(Name, (FaultDomain contains \"not applicable\")),\n    ZeroFaultDomainCount=dcountif(Name, (FaultDomain contains \"0\")),\n    Gt0FaultDomainCount=dcountif(Name, (FaultDomain !contains \"not applicable\") and (FaultDomain !contains \"0\") and (FaultDomain !contains \"undefined\")),\n    NAOSDiskCount=dcountif(Name, (OSDisk contains \"not applicable\")),\n    UnknownOSDiskCount=dcountif(Name, (OSDisk contains \"Unknown\")),\n    OtherOSDiskCount=dcountif(Name, (OSDisk !contains \"premium\") and (OSDisk !contains \"ultra\") and (OSDisk !contains \"ephemeral\") and (OSDisk !contains \"not applicable\")),\n    PremorUltOSDiskCount=dcountif(Name, (OSDisk contains \"premium\") or (OSDisk contains \"ultra\") or (OSDisk contains \"ephemeral\")),\n    NABackupCount=dcountif(Name, (Backup contains \"not applicable\")),\n    UnknownBackupCount=dcountif(Name, (Backup contains \"Unknown\")),\n    HealthyBackupCount=dcountif(Name, (Backup == \"healthy\")),\n    UnhealthyBackupCount=dcountif(Name, (Backup == \"unhealthy\")),\n    RunningState=dcountif(Name, State contains \"running\" or State contains \"ready\"),\n    DBOnlineStateCount=dcountif(Name, State contains \"online\" or State contains \"ready\"), // online - SQL, Ready - MySQL\n    DBPausedStateCount=dcountif(Name, State contains \"paused\"),\n    DBGeoStorage=dcountif(Name, OSDisk == \"grs\"),\n    DBLrsStorage=dcountif(Name, OSDisk == \"lrs\"),\n    Gt0DbReplica=dcountif(Name, (ReadReplica !contains \"not applicable\") and (ReadReplica !contains \"1\") and (ReadReplica !contains \"undefined\")),\n    Lt1DbReplica=dcountif(Name, ReadReplica contains \"0\"),\n    NotEnabledDbMultiWrite=dcountif(Name, MultipleWriteLocations contains \"not enabled\"),\n    NADbMultiWrite=dcountif(Name, MultipleWriteLocations contains \"not applicable\"),\n    EnabledDbMultiWrite=dcountif(Name, MultipleWriteLocations == \"enabled\"),\n    NotConfiguredAutomaticFailover=dcountif(Name, AutomaticFailover == \"not configured\"),\n    ConfiguredAutomaticFailover=dcountif(Name, AutomaticFailover == \"configured\"),\n    NAAutomaticFailover=dcountif(Name, AutomaticFailover == \"not applicable\"),\n    EnabledStorageAutogrow=dcountif(Name, StorageAutogrow == \"enabled\"),\n    NotEnabledStorageAutogrow=dcountif(Name, StorageAutogrow != \"enabled\" and Type != \"microsoft.dbformysql/flexibleservers\"),\n    ReplicationEnabled=dcountif(Name, ReplicationRole == \"master\" or ReplicationRole == \"replica\"),\n    NAReplicationEnabled=dcountif(Name, ReplicationRole == \"none\" and AvailabilityZone != \"enabled\" and Type == \"microsoft.dbformysql/flexibleservers\"),\n    NoReplicationEnabled=dcountif(Name, ReplicationRole == \"none\" and AvailabilityZone != \"enabled\"),\n    RAStorageEnabled=dcountif(Name, ReadReplica == \"configured\" and Type contains 'storageaccounts'),\n    NoRAStorageEnabled=dcountif(Name, ReadReplica == \"not configured\" and Type contains 'storageaccounts'),\n    NARAStorageEnabled=dcountif(Name, ReadReplica == \"not applicable\" and Type contains 'storageaccounts'),\n    V2StorageEnabled=dcountif(Name, Kind == \"storagev2\" and Type contains 'storageaccounts'),\n    NoV2StorageEnabled=dcountif(Name, Kind != \"storagev2\" and Type contains 'storageaccounts'),\n    AfdNonLegacySkuCount=dcountif(Name, (SkuName != \"standard_microsoft\" and SkuName != \"standard_akamai\" and SkuName != \"classic_frontdoor\") and (Type == 'microsoft.cdn/profiles' or Type == 'microsoft.network/frontdoors')),\n    AfdActiveStateCount=dcountif(Name, (State == \"active\" or State == \"enabled\") and (Type == 'microsoft.cdn/profiles' or Type == 'microsoft.network/frontdoors')),\n    V2AppGwSkuCount=dcountif(Name, SkuName contains \"_v2\" and Type == 'microsoft.network/applicationgateways'),\n    AutoScaleAppGwCount=dcountif(Name, AutomaticFailover == \"configured\" and Type == 'microsoft.network/applicationgateways'),\n    NoAutoScaleAppGwCount=dcountif(Name, AutomaticFailover == \"not configured\" and Type == 'microsoft.network/applicationgateways'),\n    AsrSucceededState=dcountif(Name, State == \"succeeded\" and Type == 'microsoft.recoveryservices/vaults'),\n    NoAsrSucceededState=dcountif(Name, State != \"succeeded\" and Type == 'microsoft.recoveryservices/vaults'),\n    AzFWSucceededStateCount=dcountif(Name, State == \"succeeded\" and Type == 'microsoft.network/azurefirewalls'),\n    NoAzFWSucceededStateCount=dcountif(Name, State != \"succeeded\" and Type == 'microsoft.network/azurefirewalls'),\n    SucceededStateCount=dcountif(Name, State == \"succeeded\"),\n    NoSucceededStateCount=dcountif(Name, State != \"succeeded\"),\n    AzVnetGwSkuCount=dcountif(Name, SkuName contains \"az\" and Type == 'microsoft.network/virtualnetworkgateways'), \n    NoAzVnetGwSkuCount=dcountif(Name, SkuName !contains \"az\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    RouteVnetGwVpnTypeCount=dcountif(Name, (FaultDomain == \"routebased\" or FaultDomain == \"erpolicybased\") and Type == 'microsoft.network/virtualnetworkgateways'),\n    Gen2VnetGwCount=dcountif(Name, OSDisk == \"generation2\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    NAGen2VnetGwCount=dcountif(Name, OSDisk == \"none\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    ActiveActiveVnetGwCount=dcountif(Name, ReadReplica == \"true\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    NAActiveActiveVnetGwCount=dcountif(Name, ReadReplica == \"not applicable\" and Type == 'microsoft.network/virtualnetworkgateways'),\n    Stv2ApimCount=dcountif(Name, OSDisk == \"stv2\" and Type == 'microsoft.apimanagement/service')\n\n    by SubscriptionId, Name, Type, Environment   // SubscriptionId for export  // for individual resources in summary table\n//  ReliabilityScore: 5 checks across 5 machines = 25 total (i.e. 100%), thus 24 scored is 24/25 * 100 = 96 %\n| extend ReliabilityScore = case(\n    // VM - 4 checks // score = (\"AZ + AS + Disk + Backup\") * 100 / (3 * ResourceTotal) // AZ or AS is mutually exclusive, so VM should have either one\n    Type == 'microsoft.compute/virtualmachines', (AvZoneCount + AvSetCount + PremorUltOSDiskCount + HealthyBackupCount) * 100 / (3 * ResourceTotal), \n    // Classic VM // score = 0 / ResourceTotal\n    Type == 'microsoft.classiccompute/virtualmachines', 0,\n    // VMSS - 3 checks  // score = (Capacity + Fault Domains + managed disk type) * 100 / (3 * ResourceTotal) //********* Future - Overprovision, Fault Domain State\n    Type == 'microsoft.compute/virtualmachinescalesets', (Gt1CapacityCount + Gt0FaultDomainCount + PremorUltOSDiskCount) * 100 / (3 * ResourceTotal),\n    // AppService \u0026 Function App - 2 checks // score = (\"non dev/shared/free/ basic sku\" + AppServiceRunningState) * 100 / (2 * ResourceTotal)\n    Type == 'microsoft.web/sites', (OtherSku + RunningState) * 100 / (2 * ResourceTotal),\n    // AppService Plan - 4 checks // score = (\"non dev/shared/free/dynamic/basic sku\" + AspReadyState + AZ + capacity) * 100 / (4 * ResourceTotal)\n    Type == 'microsoft.web/serverfarms', (OtherSku + RunningState + AvZoneCount + NAAvZoneCount + Gt1CapacityCount) * 100 / (4 * ResourceTotal),\n    // AKS - 4 checks // score = (\"AZ\" + \"AS\" + \"Capacity\" + \"Disk\") * 100 / (4 * ResourceTotal)  //********* Future - LB SKU // AZ or AS is mutually exclusive, so VM should have either one\n    Type == 'microsoft.containerservice/managedclusters', (AvZoneCount + AvSetCount + Gt1CapacityCount + PremorUltOSDiskCount) * 100 / (3 * ResourceTotal),\n    // SQLDB - 4 checks  // score = (\"status\" + \"tier\" + \"storage acct. type\"  + \"AZ\")* 100 / (5 * ResourceTotal)  //********* Future - \"read replica count\"\n    Type == 'microsoft.sql/servers/databases', (DBOnlineStateCount + SqlPremiumOrBusinessCriticalOrDwh + DBGeoStorage + AvZoneCount + NAAvZoneCount) * 100 / (4 * ResourceTotal),\n    // CosmosDB - 4 checks // score = ( \"readreplicacount\" + \"AZ\" + \"multiWrite\" + \"AutoFailover\") * 100 / (4 * ResourceTotal) // included NA items to show compliance\n    Type == 'microsoft.documentdb/databaseaccounts', (Gt0DbReplica + AvZoneCount + NAAvZoneCount + EnabledDbMultiWrite + NADbMultiWrite + ConfiguredAutomaticFailover + NAAutomaticFailover) * 100 / (4 * ResourceTotal),\n    // MySQL - 5 checks // score = (\"status\" + \"sku\" + \"grsbackup\" + \"storageautogrow\" + \"replication\") * 100 / (5 * ResourceTotal) //********* Future - \"Sku family Gen5\", read replica\n    Type == 'microsoft.dbformysql/servers', (DBOnlineStateCount + OtherSku + HealthyBackupCount + EnabledStorageAutogrow + ReplicationEnabled) * 100 / (5 * ResourceTotal),\n    // MySQL Flexible - 4 checks  // score = (\"status\" + \"sku\"  + \"replication\" + \"HaEnabled\") * 100 / (4 * ResourceTotal)    // included NA items to show compliance  //********* Future - \"read replica\", \"automatic failover\", \"backup\"\n    Type == 'microsoft.dbformysql/flexibleservers', (DBOnlineStateCount + OtherSku + ReplicationEnabled + NAReplicationEnabled + AvZoneCount + NAAvZoneCount) * 100 / (4 * ResourceTotal),\n    // Redis - 4 checks // score = (state + sku + AZ + capacity) * 100 / (4 * ResourceTotal)\n    Type == 'microsoft.cache/redis', (SucceededStateCount + OtherSku + AvZoneCount + NAAvZoneCount + RedisDedicatedCapacityCount) * 100 / (4 * ResourceTotal),\n    // APIM - 5 checks // score = (\"Tier\" + state + \"capacity\" + AZ + stv2platform) * 100 / (5 * ResourceTotal) \n    Type == 'microsoft.apimanagement/service', (OtherSku + SucceededStateCount + Gt1CapacityCount + AvZoneCount + Stv2ApimCount) * 100 / (5 * ResourceTotal),\n    // Storage - 2 checks // score = ( \"kind\" + \"replication type\") * 100 / (2 * ResourceTotal)    //********* Future - \"access tier hot\"\n    Type == 'microsoft.storage/storageaccounts' or Type == 'microsoft.classicstorage/storageaccounts', (V2StorageEnabled + RAStorageEnabled + NARAStorageEnabled) * 100 / (2 * ResourceTotal),\n    // AzureFirewall - 1 check // score = (State + AZ) * 100 / (2 * ResourceTotal)\n    Type == 'microsoft.network/azurefirewalls', (AzFWSucceededStateCount + AvZoneCount + NAAvZoneCount)* 100 / (2 * ResourceTotal),\n    // AFD and CDN - 2 check // score = state + non-legacy-sku  * 100 / (2 * ResourceTotal)\n    Type == 'microsoft.cdn/profiles' or Type == 'microsoft.network/frontdoors', (AfdActiveStateCount + AfdNonLegacySkuCount) * 100 / (2 * ResourceTotal),\n    // AppGW - 5 checks    // score = (state + AZ + Tier + autoscaling + capacity) * 100 / (5 * ResourceTotal)\n    Type == 'microsoft.network/applicationgateways', (RunningState + AvZoneCount + NAAvZoneCount + V2AppGwSkuCount + AutoScaleAppGwCount + Gt1CapacityCount) * 100 / (5 * ResourceTotal),\n    // LB - 3 checks  // score = (SKU + state + AZ) * 100 / (3 * ResourceTotal)\n    Type == 'microsoft.network/loadbalancers', (OtherSku + SucceededStateCount + AvZoneCount + NAAvZoneCount) * 100 / (3 * ResourceTotal),\n    // Public IP - 3 checks // score = (SKU + state + AZ) * 100 / (3 * ResourceTotal)\n    Type == 'microsoft.network/publicipaddresses', (OtherSku + SucceededStateCount + AvZoneCount + NAAvZoneCount) * 100 / (3 * ResourceTotal),\n    // Public IP Prefix - 3 checks // score = (SKU + state + AZ) * 100 / (3 * ResourceTotal)\n    Type == 'microsoft.network/publicipprefixes', (OtherSku + SucceededStateCount + AvZoneCount + NAAvZoneCount) * 100 / (3 * ResourceTotal),\n    // VNET Gateway - 6 checks // score = (SKU + state + capacity + vpntype + generation + active-active) * 100 / (6 * ResourceTotal)\n    Type == 'microsoft.network/virtualnetworkgateways', (AzVnetGwSkuCount + SucceededStateCount + Gt1CapacityCount + NACapacityCount + RouteVnetGwVpnTypeCount + Gen2VnetGwCount + NAGen2VnetGwCount + ActiveActiveVnetGwCount + NAActiveActiveVnetGwCount) * 100 / (6 * ResourceTotal),\n    // ASR - 1 check  // score = status * 100 / (1 * ResourceTotal)\n    Type == 'microsoft.recoveryservices/vaults', (AsrSucceededState) * 100 / (1 * ResourceTotal),\n    0)\n    | extend ReliabilityScore = tostring(ReliabilityScore)\n    | sort by SubscriptionId, Type  // SubscriptionId for export",
                      "size": 3,
                        "title": "Reliability Score by Resource Type, Environment and Resource",
                      "showExportToExcel": true,
                      "exportToExcelOptions": "all",
                      "queryType": 1,
                      "resourceType": "microsoft.resourcegraph/resources",
                      "crossComponentResources": [
                        "{Subscriptions}"
                      ],
                      "gridSettings": {
                        "formatters": [
                          {
                            "columnMatch": "$gen_group",
                              "formatter": 13,
                            "formatOptions": {
                                "linkTarget": "Resource",
                              "showIcon": true
                            }
                          },
                          {
                            "columnMatch": "SubscriptionId",
                            "formatter": 5
                          },
                          {
                              "columnMatch": "Name",
                              "formatter": 5
                            },
                            {
                            "columnMatch": "Type",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "Environment",
                            "formatter": 18,
                            "formatOptions": {
                              "thresholdsOptions": "colors",
                              "thresholdsGrid": [
                                {
                                  "operator": "contains",
                                  "thresholdValue": "prod",
                                  "representation": "redBright",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "contains",
                                  "thresholdValue": "Prod",
                                  "representation": "redBright",
                                  "text": "{0}{1}"
                                },
                                {
                                  "operator": "Default",
                                  "thresholdValue": null,
                                  "text": "{0}{1}"
                                }
                              ]
                            }
                            },
                            {
                              "columnMatch": "ReliabilityScore",
                              "formatter": 0,
                              "formatOptions": {
                                "aggregation": "Average"
                              }
                          }
                        ],
                        "rowLimit": 10000,
                        "filter": true,
                        "hierarchySettings": {
                          "treeType": 1,
                          "groupBy": [
                            "SubscriptionId",
                              "Type",
                              "Environment"
                          ],
                            "expandTopLevel": false,
                            "finalBy": "Name"
                        },
                        "sortBy": [
                          {
                            "itemKey": "ResourceTotal",
                            "sortOrder": 2
                          }
                        ],
                        "labelSettings": [
                          {
                            "columnId": "Type",
                            "label": "Service"
                          },
                          {
                            "columnId": "ResourceTotal",
                            "label": "Resource Total"
                          }
                        ]
                      },
                      "sortBy": [
                        {
                          "itemKey": "ResourceTotal",
                          "sortOrder": 2
                        }
                      ]
                    },
                    "name": "kql_export_summary_by_resource_environment",
                    "styleSettings": {
                      "showBorder": true
                    }
                  },
                  {
                    "type": 3,
                    "content": {
                      "version": "KqlItem/1.0",
                      "query": "resources\n| where resourceGroup in ({ResourceGroup})\n| extend environment = case(\n    tags.Environment \u003c\u003e \"\", tags.Environment,\n    tags.environment \u003c\u003e \"\", tags.environment,\n    tags.Env \u003c\u003e \"\", tags.Env,\n    tags.env \u003c\u003e \"\", tags.env,\n    tolower(name) contains \"prod\", \"Production\",\n    tolower(name) contains \"dev\", \"Development\",\n    tolower(name) contains \"qa\", \"QA\",\n    tolower(name) contains \"uat\", \"UAT\",\n    tolower(name) contains \"sit\", \"SIT\",\n    tolower(name) contains \"test\", \"Test\",\n    \"Undefined\")\n| where environment in ({Environment})\n| join kind = inner(\n    resources\n    | extend tagName = tostring(bag_keys(tags)[0])\n    | extend tagValue = tostring(tags[tagName])\n    | distinct tagName,tagValue,id\n    | where (('*' in (dynamic([{TagName}])) or tagName in (dynamic([{TagName}])))) and (('*' in (dynamic([{TagValue}])) or tagValue in (dynamic([{TagValue}]))))\n    | distinct id\n)\non id\n| where \n    (type == 'microsoft.compute/virtualmachines') or \n    (type == 'microsoft.classiccompute/virtualmachines') or \n    (type == \"microsoft.compute/virtualmachinescalesets\" and tags.aksEngineVersion !contains \"aks-gomod\") or\n    (type == 'microsoft.web/sites') or \n    (type == 'microsoft.web/serverfarms') or\n    (type == \"microsoft.containerservice/managedclusters\") or \n    (type == 'microsoft.sql/servers/databases') or \n    (type == 'microsoft.documentdb/databaseaccounts') or \n    (type == 'microsoft.dbformysql/servers') or \n    (type == 'microsoft.dbformysql/flexibleservers') or\n    (type == 'microsoft.dbforpostgresql/servers') or \n    (type == 'microsoft.dbforpostgresql/flexibleservers') or \n    (type == 'microsoft.cache/redis') or\n    (type == \"microsoft.apimanagement/service\") or \n    (type == \"microsoft.storage/storageaccounts\" or type == \"microsoft.classicstorage/storageaccounts\") or \n    (type == \"microsoft.network/azurefirewalls\") or \n    (type == \"microsoft.network/frontdoors\") or\n    (type == \"microsoft.cdn/profiles\") or\n    (type == \"microsoft.network/applicationgateways\") or \n    (type == \"microsoft.network/loadbalancers\") or \n    (type == \"microsoft.network/publicipaddresses\" or type == \"microsoft.network/publicipprefixes\") or \n    (type == \"microsoft.network/virtualnetworkgateways\") or \n    (type == \"microsoft.recoveryservices/vaults\")\n| join kind=leftouter (\n    resources \n    | where type == \"microsoft.containerservice/managedclusters\"\n    // Expand per node pool to get using zone for all node pool\n    | mv-expand agentPoolProfiles = properties.agentPoolProfiles\n    | extend AvZones = agentPoolProfiles.availabilityZones\n    | extend AksNodeResourceGroup = tolower(tostring(properties.nodeResourceGroup))\n    // Get number of using zone per node pool VMSS. If it doesn't use any zone, return 0\n    | extend useAvZone = case(\n        array_length( AvZones ) \u003e 0, array_length( AvZones ), 0\n    )\n    | join kind=leftouter(\n        resources\n            | where type == 'microsoft.compute/virtualmachinescalesets'\n            | extend resourceGroup = tolower(tostring(resourceGroup))\n            | extend VmssCapacity = sku.capacity\n            | extend vmssStorageAccountType = iff(\n                properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType\n            )\n    ) on $left.AksNodeResourceGroup == $right.resourceGroup // Match AKS and VMSS with nodeResourceGroup\n    | summarize AvZones=min(useAvZone), AksMinimumNodePoolCount=min(toint(VmssCapacity)), AksNodePoolStorageAccountType=make_set(vmssStorageAccountType), FaultDomainCount=min(toint(properties1.platformFaultDomainCount)) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), tostring(plan), tostring(properties), AksNodeResourceGroup\n    | extend AksNodePoolStorageAccountType = iff(\n        tolower(tostring(AksNodePoolStorageAccountType)) contains \"standard_lrs\", \"standard_lrs\", tolower(tostring(strcat_array(AksNodePoolStorageAccountType, \",\")))\n    )\n    // If there are some node pools within AKS cluster, it returns minimum number of zones. \n    // If even one node pool is not using a zone, it will be \"Not Configured\".\n    | extend AvZones = iff(tostring(AvZones) == \"0\", \"Not Configured\", tostring(AvZones)), AvSets = \"Scale Sets\"\n) on id\n// Start - Azure Load Balancer additional logic\n| mv-expand LbFeIpConfig = properties.frontendIPConfigurations\n| extend LbUseAvZone = iff(array_length(LbFeIpConfig.zones ) \u003e 0, array_length(LbFeIpConfig.zones ), 0)\n| extend LbIpType = iff(isnotnull(LbFeIpConfig.properties.publicIPAddress), \"Public\", \"Private\")\n//| summarize LbAvZones = min(LbUseAvZone) by id, name, type, tenantId, kind, location, resourceGroup, subscriptionId, tostring(sku), plan, tostring(properties)\n//| extend properties = todynamic(properties), sku = todynamic(sku), \n| summarize LbAvZones = arg_min(LbUseAvZone, *) by id\n// End - Azure Load Balancer additional logic\n| extend state = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.extended.instanceView.powerState.displayStatus),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.instanceView.powerState),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(properties.provisioningState),\n    type == 'microsoft.web/sites', tostring(properties.state),\n    type == 'microsoft.web/serverfarms', tostring(properties.status),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.provisioningState),\n    type == 'microsoft.sql/servers/databases', tostring(properties.status),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.provisioningState),\n    type == 'microsoft.dbformysql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.dbforpostgresql/servers', tostring(properties.userVisibleState),\n    type == 'microsoft.dbforpostgresql/flexibleservers', tostring(properties.state),\n    type == 'microsoft.cache/redis', tostring(properties.provisioningState),\n    type == \"microsoft.apimanagement/service\", tostring(properties.provisioningState),\n    type contains \"storageaccounts\", tostring(properties.provisioningState),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.provisioningState),\n    type == \"microsoft.network/frontdoors\", tostring(properties.resourceState),\n    type == \"microsoft.cdn/profiles\", tostring(properties.resourceState),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.operationalState),\n    type == \"microsoft.network/loadbalancers\", tostring(properties.provisioningState),\n    type contains \"publicip\", tostring(properties.provisioningState),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.provisioningState),\n    type == \"microsoft.recoveryservices/vaults\", tostring(properties.provisioningState),\n    \"Undefined\"\n    )\n| extend skuName = case(\n    type == 'microsoft.compute/virtualmachines', tostring(properties.hardwareProfile.vmSize),\n    type == 'microsoft.classiccompute/virtualmachines', tostring(properties.hardwareProfile.size),\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.name),\n    type == 'microsoft.web/sites', tostring(properties.sku),\n    type == 'microsoft.web/serverfarms', tostring(sku.tier),\n    type == 'microsoft.containerservice/managedclusters', tostring(properties.agentPoolProfiles[0].vmSize),\n    type == 'microsoft.sql/servers/databases', tostring(sku.tier),\n    type == 'microsoft.documentdb/databaseaccounts', tostring(properties.databaseAccountOfferType),\n    type == 'microsoft.dbformysql/servers', tostring(sku.tier),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.dbforpostgresql/servers', tostring(sku.tier),\n    type == 'microsoft.dbforpostgresql/flexibleservers', tostring(sku.tier),\n    type == 'microsoft.cache/redis', tostring(properties.sku.name),\n    type == \"microsoft.apimanagement/service\", tostring(sku.name),\n    type contains 'storageaccounts', tostring(replace('-', '_', tostring(iff(type =~ \"microsoft.storage/storageaccounts\", sku.name, properties.accountType)))),\n    type == \"microsoft.network/azurefirewalls\", tostring(properties.sku.name),\n    type == \"microsoft.network/frontdoors\", \"classic_frontdoor\",\n    type == \"microsoft.cdn/profiles\", tostring(sku.name),\n    type == \"microsoft.network/applicationgateways\", tostring(properties.sku.name),\n    type == \"microsoft.network/loadbalancers\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type contains \"publicip\", iff(sku.tier == 'Global', 'Global', tostring(sku.name)),\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.name),\n    type == \"microsoft.recoveryservices/vaults\", tostring(iif(isnotnull(sku.tier), sku.tier, sku.name)),\n    \"Undefined\"\n    )\n| extend avZones = case(\n    // reffer to: https://learn.microsoft.com/en-us/azure/reliability/availability-zones-service-support#azure-regions-with-availability-zone-support\n    location !in~ ('brazilsouth', 'canadacentral', 'centralus', 'eastus', 'eastus2', 'southcentralus', 'usgovvirginia', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'polandcentral', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3', 'italynorth', 'israelcentral'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachines'), coalesce(tostring(zones[0]), 'Not Configured'),\n    (type == 'microsoft.classiccompute/virtualmachines'), 'Not Applicable',\n    (type == 'microsoft.compute/virtualmachinescalesets'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == 'microsoft.containerservice/managedclusters' and AvZones \u003c\u003e \"\"), AvZones,\n    (type == 'microsoft.containerservice/managedclusters' and isempty(AvZones)), \"Not Configured\",\n    (type == 'microsoft.web/sites'), \"ASP AZ config\",\n    (type == 'microsoft.web/serverfarms'), iff(properties.zoneRedundant == 'true', 'Configured', 'Not Configured'),\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), case( //SQL AZ SKU \u0026 region availability filter\n        sku.tier == 'Basic' or sku.tier == 'Standard' or sku.name == 'System', 'Not Applicable',\n        // Outside of these regions, SQL DB is not available in AZ. Refer to: https://learn.microsoft.com/en-us/azure/azure-sql/database/high-availability-sla?view=azuresql\u0026tabs=azure-powershell#general-purpose-service-tier-zone-redundant-availability\n        sku.tier == 'GeneralPurpose' and location !in~ ('brazilsouth', 'eastus', 'eastus2', 'southcentralus', 'westus2', 'westus3', 'francecentral', 'germanywestcentral', 'northeurope', 'norwayeast', 'uksouth', 'westeurope', 'swedencentral', 'switzerlandnorth', 'polandcentral', 'qatarcentral', 'uaenorth', 'southafricanorth', 'australiaeast', 'centralindia', 'japaneast', 'koreacentral', 'southeastasia', 'eastasia', 'chinanorth3', 'italynorth', 'israelcentral'), 'Not Applicable',\n        properties.zoneRedundant == 'true', 'Configured',\n        'Not Configured'\n    ),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts'), iif(properties.locations[0].isZoneRedundant == \"false\", 'Not Configured', 'Configured'), \n    (type == 'microsoft.dbformysql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/flexibleservers'),case(\n        properties.highAvailability.mode == \"ZoneRedundant\", \"Configured\",\n        properties.replicationRole == \"Replica\", \"Not Applicable\",\n        'Not Configured'\n    ),\n    (type == 'microsoft.dbforpostgresql/servers'), \"Not Applicable\",\n    (type == 'microsoft.dbforpostgresql/flexibleservers'),case(\n        properties.highAvailability.mode == \"ZoneRedundant\", \"Configured\",\n        properties.replicationRole == \"Replica\", \"Not Applicable\",\n        'Not Configured'\n    ),\n    (type == 'microsoft.cache/redis'), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type == \"microsoft.apimanagement/service\"), coalesce(tostring(array_length(parse_json(zones))), 'Not Configured'),\n    (type contains 'storageaccounts'), case(split(skuName, '_', 1)[0] contains \"zrs\", \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/azurefirewalls\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), iif(isnotnull(zones), \"Configured\", \"Not Configured\"),\n    (type == \"microsoft.network/loadbalancers\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    LbIpType =~ \"Public\", \"Public IP AZ Config\",\n    tostring(LbAvZones) =~ \"0\", \"Not Configured\",\n    tostring(LbAvZones)\n    ),\n    (type contains \"publicip\"), case( \n    skuName =~ \"Basic\" or skuName =~ \"Global\", \"Not Applicable\",\n    coalesce(tostring(array_length(parse_json(zones))), 'Not Configured')\n    ),\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Public IP AZ Config\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend avSets = case(\n    type == 'microsoft.compute/virtualmachines' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachines', (coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), 'Not Configured')),\n    type == 'microsoft.classiccompute/virtualmachines', iff(isnotnull(properties.hardwareProfile.availabilitySet), 'Configured', 'Not Configured'),\n    type == 'microsoft.compute/virtualmachinescalesets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', 'A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.',\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', case(\n    AvSets == 'Scale Sets' and avZones in ('1', '2', '3'), \"Not Applicable\",\n    AvSets == 'Scale Sets', \"A regional (non-zonal) scale set uses placement groups, which act as an implicit availability set with five fault domains and five update domains.\",\n    \"Scale Sets Not Configured\"\n    ),\n    type == 'microsoft.sql/servers/databases', 'Not Applicable',\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/servers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', \"Not Applicable\",\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", tostring(properties.publicIPAddressVersion), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.gatewayType), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend Capacity = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', tostring(sku.capacity),\n    type == 'microsoft.web/sites', \"ASP Config\",\n    type == 'microsoft.web/serverfarms', tostring(sku.capacity),\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(AksMinimumNodePoolCount), tostring(AksMinimumNodePoolCount), \"0\"), // AKS with or without VMSS\n    type == 'microsoft.sql/servers/databases', tostring(sku.capacity),\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbformysql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.dbforpostgresql/servers', tostring(sku.capacity),\n    type == 'microsoft.dbforpostgresql/flexibleservers', tostring(sku.capacity),\n    type == 'microsoft.cache/redis', strcat(properties.sku.family, properties.sku.capacity),\n    type == \"microsoft.apimanagement/service\", tostring(sku.capacity),\n    type contains \"storageaccounts\", \"Not Applicable\", \n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", tostring(iif(isnotempty(properties.autoscaleConfiguration), properties.autoscaleConfiguration.minCapacity, properties.sku.capacity)),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", iif(type == \"microsoft.network/publicipprefixes\", \"PIP-prefix\", \"Single\"), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.sku.capacity),\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend FaultDomain = case(\n    type == 'microsoft.compute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.classiccompute/virtualmachines', \"Not Applicable\",\n    type == 'microsoft.compute/virtualmachinescalesets', iif(isnotempty(properties.platformFaultDomainCount), properties.platformFaultDomainCount, \"0\"),  // 1 - AZ, 5 - Regional VMSS\n    type == 'microsoft.web/sites', \"Not Applicable\",\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', iif(isnotempty(tostring(FaultDomainCount)), tostring(FaultDomainCount), \"0\"),\n    type == 'microsoft.sql/servers/databases', \"Not Applicable\",\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.dbforpostgresql/servers', 'Not Applicable',\n    type == 'microsoft.dbforpostgresql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\" and properties.vpnType == \"PolicyBased\", \"ErPolicyBased\", tostring(properties.vpnType)), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend osDisk = case(\n    type == 'microsoft.compute/virtualmachines', iif(properties.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.classiccompute/virtualmachines', 'Classic',\n    type == 'microsoft.compute/virtualmachinescalesets', iif(properties.virtualMachineProfile.storageProfile.osDisk.diffDiskSettings.option == \"Local\", \"Ephemeral\", properties.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType),\n    type == 'microsoft.web/sites', 'Not Applicable',\n    type == 'microsoft.web/serverfarms', 'Not Applicable',\n    type == 'microsoft.containerservice/managedclusters', AksNodePoolStorageAccountType,\n    type == 'microsoft.sql/servers/databases', properties.currentBackupStorageRedundancy,\n    type == 'microsoft.documentdb/databaseaccounts', 'Not Applicable',\n    type == 'microsoft.dbformysql/servers', 'Not Applicable',\n    type == 'microsoft.dbformysql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.dbforpostgresql/servers', 'Not Applicable',\n    type == 'microsoft.dbforpostgresql/flexibleservers', 'Not Applicable',\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.platformVersion), //Field Override\n    type contains \"storageaccounts\", tostring(split(skuName, '_', 0)[0]),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", tostring(LbIpType),  //Field Override\n    type contains \"publicip\", tostring(properties.publicIPAllocationMethod), //Field Override\n    type == \"microsoft.network/virtualnetworkgateways\", tostring(properties.vpnGatewayGeneration), //Field Override\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    'Not Applicable'\n    )\n| extend OSDisk = case(\n    isnotempty(osDisk), osDisk,\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and state \u003c\u003e 'VM running', 'Unknown, start VM to get disk information.',\n    isempty(osDisk) and (type == 'microsoft.compute/virtualmachines') and isnotempty(properties.storageProfile.osDisk.vhd.uri), 'Unmanaged',\n    \"Unknown\")\n| extend ReadReplica = case (\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), tostring(properties.readReplicaCount), // SQL DB\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\", // Synapse\n    type == 'microsoft.documentdb/databaseaccounts', tostring(array_length(parse_json(properties.readLocations))),\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/servers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/flexibleservers', \"Not Applicable\",\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", tostring(properties.additionalLocations),\n    type contains \"storageaccounts\", case(\n        // Use the following query to get 3+0 regions: az account list-locations -o table --query '[?availabilityZoneMappings \u0026\u0026 (!metadata.pairedRegion || length(metadata.pairedRegion) == `0`)]'\n        location in~ ('qatarcentral', 'polandcentral', 'israelcentral', 'italynorth') and split(skuName, '_', 1)[0] startswith \"zrs\" , 'Configured',\n        split(skuName, '_', 1)[0] startswith \"ra\", \"Configured\",\n        \"Not Configured\"\n        ),\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", \"Not Applicable\",\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", iff(properties.gatewayType == \"ExpressRoute\", \"Not Applicable\", tostring(properties.activeActive)), //Field Override,\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend AutomaticFailover = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"false\" and properties.enableMultipleWriteLocations == \"false\" and toint(ReadReplica) \u003e 1), \"Not Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableAutomaticFailover == \"true\"), \"Configured\",\n    (type == 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    type == 'microsoft.dbformysql/servers', \"Not Applicable\",\n    type == 'microsoft.dbformysql/flexibleservers', case(\n        properties.highAvailability.mode == \"Disabled\" and properties.replicationRole != \"Replica\" , \"Not Configured\",\n        properties.replicationRole == \"Replica\", \"Not Applicable\",\n        properties.highAvailability.mode == \"ZoneRedundant\", \"Zone Redundant\",\n        properties.highAvailability.mode == \"SameZone\", \"Same Zone\",\n        properties.highAvailability.mode\n    ),\n    type == 'microsoft.dbforpostgresql/servers', \"Not Applicable\",\n    type == 'microsoft.dbforpostgresql/flexibleservers', case(    \n    properties.highAvailability.mode == \"Disabled\" and properties.replicationRole !contains \"AsyncReplica\", \"Not Configured\",\n        properties.replicationRole == \"GeoAsyncReplica\", \"Not Applicable\",\n        properties.replicationRole == \"AsyncReplica\", \"Not Applicable\",\n        properties.highAvailability.mode == \"ZoneRedundant\", \"Zone Redundant\",\n        properties.highAvailability.mode == \"SameZone\", \"Same Zone\",\n        properties.highAvailability.mode\n    ),\n    type == 'microsoft.dbformysql/flexibleservers', case(properties.haEnabled == \"Enabled\", \"Configured\", \"Not Applicable\"),\n    type == 'microsoft.cache/redis', 'Not Applicable',\n    type == \"microsoft.apimanagement/service\", \"Not Applicable\",\n    type contains \"storageaccounts\", \"Not Applicable\",\n    type == \"microsoft.network/azurefirewalls\", \"Not Applicable\",\n    type == \"microsoft.network/frontdoors\", \"Not Applicable\",\n    type == \"microsoft.cdn/profiles\", \"Not Applicable\",\n    type == \"microsoft.network/applicationgateways\", iif(isnotempty(properties.autoscaleConfiguration), \"Configured\", \"Not Configured\"),\n    type == \"microsoft.network/loadbalancers\", \"Not Applicable\",\n    type contains \"publicip\", \"Not Applicable\",\n    type == \"microsoft.network/virtualnetworkgateways\", \"Not Applicable\",\n    type == \"microsoft.recoveryservices/vaults\", \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend MultipleWriteLocations = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.dbformysql/servers', 'microsoft.dbformysql/flexibleservers', 'microsoft.dbforpostgresql/servers', 'microsoft.dbforpostgresql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"false\"), \"Not Enabled\",\n    (type == 'microsoft.documentdb/databaseaccounts' and properties.enableMultipleWriteLocations == \"true\"), \"Enabled\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend StorageAutogrow = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.sql/servers/databases', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbformysql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.dbforpostgresql/servers'), tostring(properties.storageProfile.storageAutogrow),\n    (type == 'microsoft.dbforpostgresql/flexibleservers'), \"Not Applicable\",\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), \"Not Applicable\",\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| extend ReplicationRole = case(\n    type in ('microsoft.compute/virtualmachines', 'microsoft.classiccompute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.web/sites', 'microsoft.web/serverfarms', 'microsoft.containerservice/managedclusters', 'microsoft.documentdb/databaseaccounts'), \"Not Applicable\",\n    (type == 'microsoft.sql/servers/databases' and sku.tier \u003c\u003e 'DataWarehouse'), iif(isnotempty(properties.secondaryType), \"replica\", \"master\"),\n    (type == 'microsoft.sql/servers/databases' and sku.tier == 'DataWarehouse'), \"Not Applicable\",\n    (type == 'microsoft.dbformysql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbformysql/flexibleservers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbforpostgresql/servers'), tostring(properties.replicationRole),\n    (type == 'microsoft.dbforpostgresql/flexibleservers'), tostring(properties.replicationRole),\n    (type == 'microsoft.cache/redis'), 'Not Applicable',\n    (type == \"microsoft.apimanagement/service\"), \"Not Applicable\",\n    (type contains \"storageaccounts\"), tostring(split(skuName, '_', 1)[0]),\n    (type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (type == \"microsoft.network/frontdoors\"), \"Not Applicable\",\n    (type == \"microsoft.cdn/profiles\"), \"Not Applicable\",\n    (type == \"microsoft.network/applicationgateways\"), \"Not Applicable\",\n    (type == \"microsoft.network/loadbalancers\"), \"Not Applicable\",\n    (type contains \"publicip\"), \"Not Applicable\",\n    (type == \"microsoft.network/virtualnetworkgateways\"), \"Not Applicable\",\n    (type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Undefined\"\n    )\n| project \n    Type = tolower(type),\n    SkuName = tolower(skuName),\n    Kind = tolower(kind),\n    SubscriptionId = subscriptionId,\n    Name = tolower(tostring(id)),\n    State = tolower(state),\n    Location = tolower(location),\n    ResourceGroup = resourceGroup,\n    Zones = tolower(tostring(zones)),\n    AvailabilityZone = tolower(avZones),\n    AvailabilitySet = tolower(avSets),\n    Capacity = tolower(Capacity),\n    FaultDomain = tolower(FaultDomain),\n    OSDisk = tolower(OSDisk),\n    ReadReplica = tolower(ReadReplica), \n    AutomaticFailover = tolower(AutomaticFailover),\n    MultipleWriteLocations = tolower(MultipleWriteLocations),\n    StorageAutogrow = tolower(StorageAutogrow),\n    ReplicationRole = tolower(ReplicationRole),\n    Environment = environment,\n    properties\n| join kind = leftouter (\n    recoveryservicesresources\n    | extend vmId = case(\n        properties.backupManagementType == \"AzureIaasVM\", tolower(tostring(properties.dataSourceInfo.resourceID)),\n        type == \"microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotecteditems\", tolower(tostring(properties.providerSpecificDetails.dataSourceInfo.resourceId)),\n        ''\n    )\n    | extend asrId = iff(type == \"microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotecteditems\", tolower(tostring(strcat_array(array_slice(split(properties.recoveryFabricId, '/'), 0, 8), '/'))), '')\n    | extend resourceId = case(\n        properties.backupManagementType == \"AzureIaasVM\", vmId,\n        type == \"microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotecteditems\", asrId,\n        ''\n    )\n    | extend Backup = tostring(properties.protectionStatus)\n    | extend replicationHealth = properties.replicationHealth\n    | extend failoverHealth = properties.failoverHealth\n    | extend protectionStateDescription = properties.protectionStateDescription\n    | extend isReplicationAgentUpdateRequired = properties.providerSpecificDetails.isReplicationAgentUpdateRequired\n    | project resourceId, vmId, asrId, Backup, replicationHealth, failoverHealth, protectionStateDescription, isReplicationAgentUpdateRequired\n  )\n  on $left.Name == $right.resourceId\n| extend Backup = case(\n    Backup == \"Healthy\" or Backup == \"Unhealthy\", Backup,\n    \"Unknown\")\n| extend Backup = case(\n    (Type == 'microsoft.compute/virtualmachines'), iif(Backup == \"Unknown\", \"Not Configured\", Backup),\n    (Type == 'microsoft.classiccompute/virtualmachines'), iif(Backup == \"Unknown\", \"Not Configured\", Backup),\n    (Type == \"microsoft.compute/virtualmachinescalesets\"), \"Not Applicable\", \n    (Type == \"microsoft.containerservice/managedclusters\"), \"Not Applicable\",\n    (Type == 'microsoft.sql/servers/databases'), \"Not Applicable\",\n    (Type == 'microsoft.documentdb/databaseaccounts'), iif(properties.backupPolicy.type!=\"Continuous\",iif(properties.backupPolicy.periodicModeProperties.backupStorageRedundancy == \"Geo\", \"Geo\", \"Not Geo\"),\"Continuous\"),\n    (Type == 'microsoft.dbformysql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbformysql/flexibleservers'), properties.backup.geoRedundantBackup,\n    (Type == 'microsoft.dbforpostgresql/servers'), iif(properties.storageProfile.geoRedundantBackup == \"Enabled\", \"Healthy\", \"Unhealthy\"),\n    (Type == 'microsoft.dbforpostgresql/flexibleservers'), case(\n        properties.backup.geoRedundantBackup == \"Disabled\" and properties.replicationRole !contains \"AsyncReplica\", \"Disabled\",\n        properties.replicationRole == \"GeoAsyncReplica\", \"Not Applicable\",\n        properties.replicationRole == \"AsyncReplica\", \"Not Applicable\",\n        properties.backup.geoRedundantBackup\n    ),\n    (Type contains \"storageaccounts\"), \"Not Applicable\",\n    (Type == \"microsoft.network/azurefirewalls\"), \"Not Applicable\",\n    (Type == \"microsoft.recoveryservices/vaults\"), \"Not Applicable\",\n    \"Unknown\"\n    )\n| extend AvailabilitySet = case(\n    AvailabilitySet == '-', 'None',\n    isnotempty(AvailabilitySet), AvailabilitySet,\n    \"Unknown\")\n\n| project Type, SkuName, Kind, SubscriptionId, Name, ResourceName = split(Name, '/')[-1], State, Location, ResourceGroup, Zones, AvailabilityZone, AvailabilitySet, Capacity, FaultDomain, OSDisk, ReadReplica, AutomaticFailover, MultipleWriteLocations, StorageAutogrow, ReplicationRole, Backup = tolower(Backup), Environment",
                      "size": 0,
                      "title": "Resources Details",
                      "showExportToExcel": true,
                      "queryType": 1,
                      "resourceType": "microsoft.resourcegraph/resources",
                      "crossComponentResources": [
                        "{Subscriptions}"
                      ],
                      "gridSettings": {
                        "formatters": [
                          {
                            "columnMatch": "$gen_group",
                              "formatter": 13,
                            "formatOptions": {
                                "linkTarget": "Resource",
                              "showIcon": true
                            }
                          },
                          {
                            "columnMatch": "Subscription",
                            "formatter": 13,
                            "formatOptions": {
                              "linkTarget": "Resource",
                              "showIcon": true
                            }
                          },
                          {
                            "columnMatch": "Name",
                            "formatter": 5
                          },
                          {
                            "columnMatch": "SubscriptionId",
                            "formatter": 5
                            },
                            {
                            "columnMatch": "ResourceName",
                            "formatter": 1
                          }
                        ],
                        "rowLimit": 10000,
                        "filter": true,
                        "hierarchySettings": {
                          "treeType": 1,
                          "groupBy": [
                            "SubscriptionId"
                            ],
                            "finalBy": "Name"
                        },
                        "labelSettings": [
                          {
                            "columnId": "SubscriptionId",
                            "label": "Subscription"
                          }
                        ]
                      }
                    },
                    "name": "kql_export_resources_details"
                  },
                  {
                    "type": 3,
                    "content": {
                      "version": "KqlItem/1.0",
                      "query": "advisorresources\n| extend Category = tostring(properties.category)\n| extend Description = tostring(properties.shortDescription.problem)\n| extend ImpactedField = tostring(properties.impactedField)\n| extend ImpactedValue = tostring(properties.resourceMetadata.resourceId)\n| extend Impact = tostring(properties.impact)\n| extend LastUpdated = tostring(properties.lastUpdated)\n| project Impact, ImpactedField, ImpactedValue, Description, resourceGroup, subscriptionId, Category, LastUpdated\n| where Category == \"HighAvailability\"\n| where resourceGroup in ({ResourceGroup})",
                      "size": 0,
                      "title": "Advisor Recommendations by Impact",
                      "showExportToExcel": true,
                      "exportToExcelOptions": "all",
                      "queryType": 1,
                      "resourceType": "microsoft.resourcegraph/resources",
                      "crossComponentResources": [
                        "{Subscriptions}"
                      ],
                      "gridSettings": {
                        "formatters": [
                          {
                            "columnMatch": "$gen_group",
                              "formatter": 13,
                            "formatOptions": {
                                "linkTarget": "Resource",
                              "showIcon": true
                            }
                          },
                          {
                              "columnMatch": "ImpactedValue",
                              "formatter": 5
                            },
                            {
                            "columnMatch": "subscriptionId",
                            "formatter": 5
                          }
                        ],
                        "rowLimit": 10000,
                        "filter": true,
                        "hierarchySettings": {
                          "treeType": 1,
                          "groupBy": [
                            "subscriptionId",
                            "Impact",
                            "Description"
                            ],
                            "finalBy": "ImpactedValue"
                        },
                        "labelSettings": [
                          {
                              "columnId": "ImpactedValue",
                              "label": "Name"
                            },
                            {
                            "columnId": "subscriptionId",
                            "label": "Subscription"
                          }
                        ]
                      }
                    },
                    "name": "query - 2"
                  }
                ]
              },
              "name": "arg consolidated group"
            }
          ]
        },
        "name": "ExportStep"
      }
    ]
}
